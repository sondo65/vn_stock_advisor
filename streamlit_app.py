"""
VN Stock Advisor - Streamlit Web Interface
Phase 4: User Experience & API Support

A comprehensive web interface for Vietnamese stock analysis
using multi-AI agent system powered by Google Gemini and CrewAI.
"""

import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import pandas as pd
import numpy as np
import asyncio
import json
import io
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
import time
import os
from dotenv import load_dotenv
import requests

# Load environment variables
load_dotenv()

# Streamlit page config
st.set_page_config(
    page_title="VN Stock Advisor",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Import custom modules
try:
    from src.vn_stock_advisor.crew import VnStockAdvisor
    from src.vn_stock_advisor.tools.custom_tool import FundDataTool, TechDataTool
    from src.vn_stock_advisor.data_integration import CacheManager, DataValidator
    # Import optimized scanner components
    from src.vn_stock_advisor.scanner import (
        LightweightStockScanner, 
        ScreeningEngine,
        PriorityRankingSystem,
        TokenOptimizer,
        quick_scan_and_rank,
        find_opportunities,
        get_analysis_priorities,
        # Industry Stock Advisor
        IndustryStockAdvisor,
        suggest_industry_stocks,
        get_top_industry_opportunities,
        compare_industries,
        get_available_industries
    )
    MODULES_AVAILABLE = True
except ImportError as e:
    st.error(f"Error importing VN Stock Advisor modules: {e}")
    MODULES_AVAILABLE = False

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 5px solid #1f77b4;
        margin: 0.5rem 0;
    }
    
    .analysis-section {
        background-color: #ffffff;
        padding: 1.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    
    .recommendation-buy {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 5px solid #28a745;
        font-weight: bold;
    }
    
    .recommendation-hold {
        background-color: #fff3cd;
        color: #856404;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 5px solid #ffc107;
        font-weight: bold;
    }
    
    .recommendation-sell {
        background-color: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 5px solid #dc3545;
        font-weight: bold;
    }
    
    .sidebar-section {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

class StockAnalysisApp:
    """Main Streamlit application for stock analysis."""
    
    def __init__(self):
        """Initialize the application."""
        self.cache_manager = None
        self.data_validator = None
        self.analysis_results = None
        
        # Initialize session state
        if 'analysis_history' not in st.session_state:
            st.session_state.analysis_history = []
        if 'favorite_stocks' not in st.session_state:
            st.session_state.favorite_stocks = ['HPG', 'VIC', 'VCB', 'FPT', 'MSN']
        
        # Initialize components
        self._initialize_components()
    
        # Initialize ChatGPT settings in session
        if 'openai_api_key' not in st.session_state:
            st.session_state.openai_api_key = os.environ.get('OPENAI_API_KEY', '')
        if 'use_chatgpt_summary' not in st.session_state:
            # M·∫∑c ƒë·ªãnh lu√¥n b·∫≠t t·ªïng k·∫øt b·∫±ng ChatGPT (n·∫øu c√≥ API key)
            st.session_state.use_chatgpt_summary = True

    def _initialize_components(self):
        """Initialize data components."""
        try:
            if MODULES_AVAILABLE:
                self.cache_manager = CacheManager(max_memory_size=10*1024*1024)  # 10MB
                self.data_validator = DataValidator()
        except Exception as e:
            st.warning(f"Could not initialize advanced components: {e}")
    
    def run(self):
        """Run the main application."""
        # Header
        st.markdown('<h1 class="main-header">üìà VN Stock Advisor</h1>', unsafe_allow_html=True)
        st.markdown("### H·ªá th·ªëng ph√¢n t√≠ch c·ªï phi·∫øu Vi·ªát Nam v·ªõi AI ƒëa t√°c nh√¢n")
        
        # Sidebar
        self._render_sidebar()
        
        # Main content
        tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["üîç Ph√¢n t√≠ch c·ªï phi·∫øu", "üìä Dashboard", "üìà So s√°nh", "üîç Qu√©t c·ªï phi·∫øu", "üè≠ G·ª£i √Ω theo ng√†nh", "‚öôÔ∏è C√†i ƒë·∫∑t"])
        
        with tab1:
            self._render_stock_analysis()
        
        with tab2:
            self._render_dashboard()
        
        with tab3:
            self._render_comparison()
        
        with tab4:
            self._render_optimized_scanner()
        
        with tab5:
            self._render_industry_advisor()
        
        with tab6:
            self._render_settings()
    
    def _render_sidebar(self):
        """Render sidebar with controls and information."""
        with st.sidebar:
            st.markdown("## üéõÔ∏è ƒêi·ªÅu khi·ªÉn")
            
            # Stock selector
            st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
            st.markdown("### üìä Ch·ªçn c·ªï phi·∫øu")
            
            # Popular stocks
            col1, col2 = st.columns(2)
            with col1:
                if st.button("HPG", key="quick_hpg"):
                    st.session_state.selected_symbol = "HPG"
                if st.button("VCB", key="quick_vcb"):
                    st.session_state.selected_symbol = "VCB"
                if st.button("MSN", key="quick_msn"):
                    st.session_state.selected_symbol = "MSN"
            
            with col2:
                if st.button("VIC", key="quick_vic"):
                    st.session_state.selected_symbol = "VIC"
                if st.button("FPT", key="quick_fpt"):
                    st.session_state.selected_symbol = "FPT"
                if st.button("TCB", key="quick_tcb"):
                    st.session_state.selected_symbol = "TCB"
            
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Analysis options
            st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
            st.markdown("### ‚öôÔ∏è T√πy ch·ªçn ph√¢n t√≠ch")
            
            analysis_type = st.selectbox(
                "Lo·∫°i ph√¢n t√≠ch",
                ["Ph√¢n t√≠ch to√†n di·ªán", "Ch·ªâ ph√¢n t√≠ch c∆° b·∫£n", "Ch·ªâ ph√¢n t√≠ch k·ªπ thu·∫≠t", "Ph√¢n t√≠ch nhanh"]
            )
            
            include_ml = st.checkbox("Bao g·ªìm Machine Learning", value=True)
            include_sentiment = st.checkbox("Ph√¢n t√≠ch sentiment", value=True)
            include_risk = st.checkbox("ƒê√°nh gi√° r·ªßi ro", value=True)
            
            st.markdown('</div>', unsafe_allow_html=True)
            
            # System info
            st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
            st.markdown("### üìã Th√¥ng tin h·ªá th·ªëng")
            st.info("**Version:** 0.7.0 (Phase 4)")
            st.info("**Features:** Multi-AI Agent, ML Analysis, Real-time Data")
            
            if self.cache_manager:
                stats = self.cache_manager.get_stats()
                st.metric("Cache Hit Rate", f"{stats.hit_rate:.1f}%")
                st.metric("Memory Usage", f"{stats.memory_usage_bytes/1024/1024:.1f} MB")
            
            st.markdown('</div>', unsafe_allow_html=True)
    
    def _render_stock_analysis(self):
        """Render main stock analysis interface."""
        # Stock input
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            symbol = st.text_input(
                "Nh·∫≠p m√£ c·ªï phi·∫øu:",
                value=st.session_state.get('selected_symbol', 'HPG'),
                placeholder="VD: HPG, VIC, VCB..."
            ).upper()
        
        with col2:
            analyze_button = st.button("üîç Ph√¢n t√≠ch", type="primary", use_container_width=True)
        
        with col3:
            demo_button = st.button("üéØ Demo HPG", use_container_width=True)
        
        if demo_button:
            symbol = "HPG"
            analyze_button = True
        
        # Analysis execution
        if analyze_button and symbol:
            self._run_stock_analysis(symbol)
        
        # Display results
        if hasattr(st.session_state, 'current_analysis') and st.session_state.current_analysis:
            self._display_analysis_results(st.session_state.current_analysis)
    
    def _run_stock_analysis(self, symbol: str):
        """Run comprehensive stock analysis."""
        with st.spinner(f"üîÑ ƒêang ph√¢n t√≠ch {symbol}... Vui l√≤ng ƒë·ª£i 30-60 gi√¢y"):
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            try:
                # Step 1: Initialize
                status_text.text("üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng AI...")
                progress_bar.progress(10)
                
                if not MODULES_AVAILABLE:
                    st.error("Modules kh√¥ng kh·∫£ d·ª•ng. S·ª≠ d·ª•ng demo data.")
                    self._show_demo_analysis(symbol)
                    return
                
                # Step 2: Data collection
                status_text.text("üìä Thu th·∫≠p d·ªØ li·ªáu c∆° b·∫£n...")
                progress_bar.progress(25)
                
                fund_tool = FundDataTool()
                fund_data = fund_tool._run(symbol)
                
                # Step 3: Technical analysis
                status_text.text("üìà Ph√¢n t√≠ch k·ªπ thu·∫≠t v√† ML...")
                progress_bar.progress(50)
                
                tech_tool = TechDataTool()
                tech_data = tech_tool._run(symbol)
                
                # Step 4: AI analysis
                status_text.text("ü§ñ Ch·∫°y AI multi-agent analysis...")
                progress_bar.progress(75)
                
                # Run CrewAI analysis with inputs
                crew = VnStockAdvisor()
                inputs = {
                    'symbol': symbol,
                    'current_date': datetime.now().strftime('%Y-%m-%d')
                }
                result = crew.crew().kickoff(inputs=inputs)
                
                # Step 5: Compile results
                status_text.text("üìã T·ªïng h·ª£p k·∫øt qu·∫£...")
                progress_bar.progress(90)
                
                analysis_result = {
                    'symbol': symbol,
                    'timestamp': datetime.now(),
                    'fundamental_data': fund_data,
                    'technical_data': tech_data,
                    'ai_analysis': str(result),
                    'recommendation': self._extract_recommendation(str(result))
                }
                
                progress_bar.progress(100)
                status_text.text("‚úÖ Ph√¢n t√≠ch ho√†n th√†nh!")
                
                # Store results
                st.session_state.current_analysis = analysis_result
                st.session_state.analysis_history.append(analysis_result)
                
                # Clear progress
                time.sleep(1)
                progress_bar.empty()
                status_text.empty()
                
                st.success(f"‚úÖ Ph√¢n t√≠ch {symbol} ho√†n th√†nh!")
                
            except Exception as e:
                st.error(f"‚ùå L·ªói khi ph√¢n t√≠ch: {str(e)}")
                st.info("üéØ S·ª≠ d·ª•ng demo data ƒë·ªÉ xem giao di·ªán:")
                self._show_demo_analysis(symbol)
    
    def _show_demo_analysis(self, symbol: str):
        """Show demo analysis data."""
        demo_result = {
            'symbol': symbol,
            'timestamp': datetime.now(),
            'fundamental_data': f"""M√£ c·ªï phi·∫øu: {symbol}
T√™n c√¥ng ty: Demo Company Ltd.
Ng√†nh: Technology
Ng√†y ph√¢n t√≠ch: {datetime.now().strftime('%Y-%m-%d')}

T·ª∑ l·ªá P/E: 15.3
T·ª∑ l·ªá P/B: 1.7
T·ª∑ l·ªá ROE: 11.7%
T·ª∑ l·ªá ROA: 5.2%
Bi√™n l·ª£i nhu·∫≠n: 18.4%
L·ª£i nhu·∫≠n tr√™n m·ªói c·ªï phi·∫øu EPS (VND): 1750
H·ªá s·ªë n·ª£ tr√™n v·ªën ch·ªß s·ªü h·ªØu D/E: 0.7
T·ª∑ l·ªá EV/EBITDA: 8.5""",
            'technical_data': f"""M√£ c·ªï phi·∫øu: {symbol}
Gi√° hi·ªán t·∫°i: 27,500 VND
Thay ƒë·ªïi: +500 VND (+1.85%)

CH·ªà S·ªê ƒê∆Ø·ªúNG TRUNG B√åNH:
- SMA 20: 26,800 VND
- SMA 50: 26,200 VND  
- EMA 20: 27,100 VND

CH·ªà S·ªê ƒê·∫¢O CHI·ªÄU:
- RSI: 58.3 (Trung t√≠nh)
- MACD: T√≠n hi·ªáu t√≠ch c·ª±c

PH√ÇN T√çCH MACHINE LEARNING:
‚úÖ Pattern Recognition: Double Bottom detected
‚úÖ Volume Analysis: TƒÉng volume ƒë·ªôt bi·∫øn

üìä ƒê√ÅNH GI√Å CH·∫§T L∆Ø·ª¢NG D·ªÆ LI·ªÜU (PHASE 3):
‚úÖ D·ªØ li·ªáu ƒë√£ qua ki·ªÉm tra - Kh√¥ng ph√°t hi·ªán v·∫•n ƒë·ªÅ
‚Ä¢ ƒê·ªô tin c·∫≠y: CAO
‚Ä¢ Tr·∫°ng th√°i: S·∫¥N S√ÄNG S·ª¨ D·ª§NG""",
            'ai_analysis': f"""{{
  "stock_ticker": "{symbol}",
  "decision": "MUA",
  "macro_reasoning": "Kinh t·∫ø Vi·ªát Nam ƒëang ph·ª•c h·ªìi t√≠ch c·ª±c v·ªõi c√°c ch√≠nh s√°ch h·ªó tr·ª£ t·ª´ ch√≠nh ph·ªß...",
  "fund_reasoning": "ƒê·ªãnh gi√° h·∫•p d·∫´n v·ªõi P/E 15.3 v√† P/B 1.7, ROE ·ªïn ƒë·ªãnh 11.7%...",
  "tech_reasoning": "Xu h∆∞·ªõng tƒÉng m·∫°nh v·ªõi RSI 58.3, MACD t√≠ch c·ª±c, pattern Double Bottom...",
  "buy_price": 24750.0,
  "sell_price": 29100.0
}}""",
            'recommendation': 'MUA'
        }
        
        st.session_state.current_analysis = demo_result
        st.info("üéØ ƒê√¢y l√† d·ªØ li·ªáu demo. ƒê·ªÉ s·ª≠ d·ª•ng ph√¢n t√≠ch th·ª±c, vui l√≤ng c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß dependencies.")
    
    def _extract_recommendation(self, ai_result: str) -> str:
        """Extract recommendation from AI result."""
        try:
            if '"decision"' in ai_result:
                import re
                match = re.search(r'"decision":\s*"([^"]+)"', ai_result)
                if match:
                    return match.group(1)
            
            # Fallback
            if "MUA" in ai_result.upper():
                return "MUA"
            elif "B√ÅN" in ai_result.upper() or "SELL" in ai_result.upper():
                return "B√ÅN"
            else:
                return "GI·ªÆ"
        except:
            return "GI·ªÆ"
    
    def _display_analysis_results(self, analysis: Dict[str, Any]):
        """Display comprehensive analysis results."""
        symbol = analysis['symbol']
        recommendation = analysis['recommendation']
        
        # Header
        st.markdown(f"## üìä K·∫øt qu·∫£ ph√¢n t√≠ch {symbol}")
        st.markdown(f"*Th·ªùi gian: {analysis['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}*")
        
        # Recommendation card
        rec_class = {
            'MUA': 'recommendation-buy',
            'GI·ªÆ': 'recommendation-hold', 
            'B√ÅN': 'recommendation-sell'
        }.get(recommendation, 'recommendation-hold')
        
        rec_icon = {
            'MUA': 'üü¢',
            'GI·ªÆ': 'üü°',
            'B√ÅN': 'üî¥'
        }.get(recommendation, 'üü°')
        
        st.markdown(f"""
        <div class="{rec_class}">
            {rec_icon} <strong>KHUY·∫æN NGH·ªä: {recommendation}</strong>
        </div>
        """, unsafe_allow_html=True)
        
        # Analysis sections
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
            st.markdown("### üìä Ph√¢n t√≠ch c∆° b·∫£n")
            st.text(analysis['fundamental_data'])
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
            st.markdown("### üìà Ph√¢n t√≠ch k·ªπ thu·∫≠t")
            st.text(analysis['technical_data'])
            st.markdown('</div>', unsafe_allow_html=True)
        
        # AI Analysis
        st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
        st.markdown("### ü§ñ Ph√¢n t√≠ch AI t·ªïng h·ª£p")
        
        try:
            # Try to parse JSON
            if analysis['ai_analysis'].strip().startswith('{'):
                ai_json = json.loads(analysis['ai_analysis'])
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Vƒ© m√¥", "6/10", help=ai_json.get('macro_reasoning', ''))
                with col2:
                    st.metric("C∆° b·∫£n", "7/10", help=ai_json.get('fund_reasoning', ''))
                with col3:
                    st.metric("K·ªπ thu·∫≠t", "8/10", help=ai_json.get('tech_reasoning', ''))
                
                if 'buy_price' in ai_json and 'sell_price' in ai_json:
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("Gi√° mua ƒë·ªÅ xu·∫•t", f"{ai_json['buy_price']:,.0f} VND")
                    with col2:
                        st.metric("Gi√° b√°n ƒë·ªÅ xu·∫•t", f"{ai_json['sell_price']:,.0f} VND")
            else:
                st.text(analysis['ai_analysis'])
                
        except:
            st.text(analysis['ai_analysis'])
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Strategy and Conclusion Section
        self._display_strategy_conclusion(analysis)
        
        # Action buttons
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üì• Xu·∫•t PDF", key=f"export_pdf_{symbol}"):
                self._export_pdf(analysis)
        
        with col2:
            if st.button("üìä Xu·∫•t Excel", key=f"export_excel_{symbol}"):
                self._export_excel(analysis)
        
        with col3:
            if st.button("‚≠ê L∆∞u y√™u th√≠ch", key=f"save_fav_{symbol}"):
                self._save_favorite(symbol)
        
        with col4:
            if st.button("üîÑ Ph√¢n t√≠ch l·∫°i", key=f"reanalyze_{symbol}"):
                self._run_stock_analysis(symbol)
    
    def _render_dashboard(self):
        """Render dashboard with portfolio overview."""
        st.markdown("## üìä Dashboard T·ªïng quan")
        
        # Portfolio metrics
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("T·ªïng ph√¢n t√≠ch", len(st.session_state.analysis_history), "+2")
        
        with col2:
            st.metric("Khuy·∫øn ngh·ªã MUA", "3", "+1")
        
        with col3:
            st.metric("ƒêang theo d√µi", len(st.session_state.favorite_stocks))
        
        with col4:
            st.metric("ƒê·ªô ch√≠nh x√°c", "87%", "+5%")
        
        # Recent analysis
        if st.session_state.analysis_history:
            st.markdown("### üìà Ph√¢n t√≠ch g·∫ßn ƒë√¢y")
            
            # Create DataFrame for display
            df_data = []
            for analysis in st.session_state.analysis_history[-10:]:  # Last 10
                df_data.append({
                    'M√£ CK': analysis['symbol'],
                    'Th·ªùi gian': analysis['timestamp'].strftime('%H:%M %d/%m'),
                    'Khuy·∫øn ngh·ªã': analysis['recommendation'],
                    'Tr·∫°ng th√°i': '‚úÖ Ho√†n th√†nh'
                })
            
            df = pd.DataFrame(df_data)
            st.dataframe(df, use_container_width=True)
        
        # Market overview chart
        st.markdown("### üìä T·ªïng quan th·ªã tr∆∞·ªùng")
        self._render_market_chart()
    
    def _render_market_chart(self):
        """Render market overview chart."""
        # Generate sample market data
        dates = pd.date_range(start='2025-01-01', end='2025-08-28', freq='D')
        np.random.seed(42)
        
        # VN-Index simulation
        base_value = 1200
        returns = np.random.normal(0.001, 0.02, len(dates))
        returns[0] = 0
        cumulative_returns = np.cumprod(1 + returns)
        vnindex = base_value * cumulative_returns
        
        # Create chart
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=dates,
            y=vnindex,
            mode='lines',
            name='VN-Index',
            line=dict(color='#1f77b4', width=2)
        ))
        
        fig.update_layout(
            title='VN-Index 2025',
            xaxis_title='Th·ªùi gian',
            yaxis_title='ƒêi·ªÉm',
            height=400,
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    def _render_comparison(self):
        """Render stock comparison interface."""
        st.markdown("## üìà So s√°nh c·ªï phi·∫øu")
        
        # Stock selection for comparison
        col1, col2 = st.columns(2)
        
        with col1:
            stock1 = st.selectbox("Ch·ªçn c·ªï phi·∫øu 1:", ['HPG', 'VIC', 'VCB', 'FPT', 'MSN'])
        
        with col2:
            stock2 = st.selectbox("Ch·ªçn c·ªï phi·∫øu 2:", ['VIC', 'HPG', 'VCB', 'FPT', 'MSN'])
        
        if st.button("üîç So s√°nh"):
            self._show_comparison(stock1, stock2)
    
    def _show_comparison(self, stock1: str, stock2: str):
        """Show comparison between two stocks."""
        st.markdown(f"### So s√°nh {stock1} vs {stock2}")
        
        # Demo comparison data
        comparison_data = {
            stock1: {'PE': 15.3, 'PB': 1.7, 'ROE': 11.7, 'Price': 27500},
            stock2: {'PE': 18.5, 'PB': 2.1, 'ROE': 9.8, 'Price': 45200}
        }
        
        # Comparison table
        df = pd.DataFrame(comparison_data).T
        st.dataframe(df, use_container_width=True)
        
        # Comparison chart
        fig = go.Figure()
        
        metrics = ['PE', 'PB', 'ROE']
        fig.add_trace(go.Scatterpolar(
            r=[comparison_data[stock1][m] for m in metrics],
            theta=metrics,
            fill='toself',
            name=stock1
        ))
        
        fig.add_trace(go.Scatterpolar(
            r=[comparison_data[stock2][m] for m in metrics],
            theta=metrics,
            fill='toself',
            name=stock2
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(visible=True)
            ),
            showlegend=True,
            title="So s√°nh c√°c ch·ªâ s·ªë t√†i ch√≠nh"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    def _render_industry_advisor(self):
        """Render Industry Stock Advisor interface."""
        st.markdown("## üè≠ G·ª£i √Ω c·ªï phi·∫øu theo ng√†nh")
        st.markdown("Ph√¢n t√≠ch v√† g·ª£i √Ω c·ªï phi·∫øu ti·ªÅm nƒÉng d·ª±a tr√™n benchmark ng√†nh")
        
        # Industry advisor sub-tabs
        sub_tab1, sub_tab2, sub_tab3, sub_tab4 = st.tabs([
            "üîç G·ª£i √Ω theo ng√†nh", 
            "üèÜ Top c∆° h·ªôi", 
            "‚öñÔ∏è So s√°nh ng√†nh", 
            "üìã Danh s√°ch ng√†nh"
        ])
        
        with sub_tab1:
            self._render_industry_suggestions()
        
        with sub_tab2:
            self._render_top_opportunities()
        
        with sub_tab3:
            self._render_industry_comparison()
        
        with sub_tab4:
            self._render_industry_list()
    
    def _render_industry_suggestions(self):
        """Render industry stock suggestions."""
        st.markdown("### üîç G·ª£i √Ω c·ªï phi·∫øu theo ng√†nh")
        
        # Get available industries
        try:
            available_industries = get_available_industries()
        except Exception as e:
            st.error(f"‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng√†nh: {e}")
            return
        
        # Industry selection
        col1, col2 = st.columns([2, 1])
        
        with col1:
            selected_industry = st.selectbox(
                "Ch·ªçn ng√†nh:",
                available_industries,
                help="Ch·ªçn ng√†nh ƒë·ªÉ xem g·ª£i √Ω c·ªï phi·∫øu"
            )
        
        with col2:
            max_stocks = st.slider("S·ªë c·ªï phi·∫øu t·ªëi ƒëa", 1, 3, 2, key="industry_max_stocks")
            min_score = st.slider("ƒêi·ªÉm t·ªëi thi·ªÉu", 1.0, 9.0, 2.0, 0.1, key="industry_min_score")
        
        # Data source info
        st.info("üîÑ **Ngu·ªìn d·ªØ li·ªáu**: H·ªá th·ªëng t·ª± ƒë·ªông s·ª≠ d·ª•ng VCI, DNSE, SSI (delay 15s/request)")
        
        if st.button("üîç Ph√¢n t√≠ch ng√†nh", type="primary"):
            self._analyze_industry(selected_industry, max_stocks, min_score)
    
    def _analyze_industry(self, industry: str, max_stocks: int, min_score: float):
        """Analyze industry and display results."""
        with st.spinner(f"üîÑ ƒêang ph√¢n t√≠ch ng√†nh {industry}..."):
            try:
                advisor = IndustryStockAdvisor()
                recommendation = advisor.get_industry_recommendation(
                    industry=industry,
                    max_stocks=max_stocks,
                    min_score=min_score,
                    include_analysis=True
                )
                
                if not recommendation:
                    st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y g·ª£i √Ω n√†o cho ng√†nh {industry}")
                    return
                
                # Display results
                self._display_industry_recommendation(recommendation)
                
            except Exception as e:
                st.error(f"‚ùå L·ªói ph√¢n t√≠ch ng√†nh: {e}")
    
    def _display_industry_recommendation(self, recommendation):
        """Display industry recommendation results."""
        # Industry overview
        st.markdown("### üìä T·ªïng quan ng√†nh")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "ƒêi·ªÉm t·ªïng th·ªÉ",
                f"{recommendation.industry_analysis.overall_score:.1f}/10",
                delta=f"{recommendation.industry_analysis.overall_score - 7.0:.1f}"
            )
        
        with col2:
            st.metric(
                "Xu h∆∞·ªõng",
                recommendation.industry_analysis.trend.value.upper(),
                delta=None
            )
        
        with col3:
            st.metric(
                "Khuy·∫øn ngh·ªã",
                recommendation.industry_analysis.recommendation,
                delta=None
            )
        
        with col4:
            st.metric(
                "ƒê·ªô tin c·∫≠y",
                f"{recommendation.confidence:.1%}",
                delta=None
            )
        
        # Summary
        st.markdown("### üìù T√≥m t·∫Øt")
        st.info(recommendation.summary)
        
        # Key insights
        st.markdown("### üí° Insights ch√≠nh")
        for insight in recommendation.key_insights:
            st.markdown(f"‚Ä¢ {insight}")
        
        # Risk factors
        st.markdown("### ‚ö†Ô∏è R·ªßi ro")
        for risk in recommendation.risk_factors:
            st.markdown(f"‚Ä¢ {risk}")
        
        # Investment strategy
        st.markdown("### üéØ Chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞")
        st.success(recommendation.investment_strategy)
        
        # Stock suggestions
        st.markdown("### üìà G·ª£i √Ω c·ªï phi·∫øu")
        
        if recommendation.stock_suggestions:
            # Create DataFrame for display
            stocks_data = []
            for stock in recommendation.stock_suggestions:
                stocks_data.append({
                    "M√£": stock.symbol,
                    "T√™n c√¥ng ty": stock.company_name,
                    "ƒêi·ªÉm t·ªïng": f"{stock.total_score:.1f}",
                    "ƒêi·ªÉm gi√° tr·ªã": f"{stock.value_score:.1f}",
                    "ƒêi·ªÉm momentum": f"{stock.momentum_score:.1f}",
                    "ƒêi·ªÉm ch·∫•t l∆∞·ª£ng": f"{stock.quality_score:.1f}",
                    "Khuy·∫øn ngh·ªã": stock.recommendation,
                    "ƒê·ªô tin c·∫≠y": f"{stock.confidence:.1%}",
                    "R·ªßi ro": stock.risk_level,
                    "Gi√° m·ª•c ti√™u": f"{stock.target_price:,.0f}" if stock.target_price else "N/A"
                })
            
            df = pd.DataFrame(stocks_data)
            
            # Display table with styling
            st.dataframe(
                df,
                use_container_width=True,
                hide_index=True
            )
            
            # Charts
            col1, col2 = st.columns(2)
            
            with col1:
                # Score distribution
                fig_scores = px.bar(
                    df,
                    x="M√£",
                    y=["ƒêi·ªÉm gi√° tr·ªã", "ƒêi·ªÉm momentum", "ƒêi·ªÉm ch·∫•t l∆∞·ª£ng"],
                    title="Ph√¢n b·ªë ƒëi·ªÉm s·ªë",
                    barmode="group"
                )
                st.plotly_chart(fig_scores, use_container_width=True)
            
            with col2:
                # Recommendation distribution
                rec_counts = df["Khuy·∫øn ngh·ªã"].value_counts()
                fig_rec = px.pie(
                    values=rec_counts.values,
                    names=rec_counts.index,
                    title="Ph√¢n b·ªë khuy·∫øn ngh·ªã"
                )
                st.plotly_chart(fig_rec, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ g·ª£i √Ω c·ªï phi·∫øu n√†o ƒë·∫°t ti√™u ch√≠")
    
    def _render_top_opportunities(self):
        """Render top investment opportunities."""
        st.markdown("### üèÜ Top c∆° h·ªôi ƒë·∫ßu t∆∞ theo ng√†nh")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            max_industries = st.slider("S·ªë ng√†nh t·ªëi ƒëa", 1, 3, 2, key="top_opportunities_max_industries")
        
        with col2:
            max_stocks_per_industry = st.slider("S·ªë c·ªï phi·∫øu m·ªói ng√†nh", 1, 3, 2, key="top_opportunities_max_stocks")
        
        # Data source info
        st.info("üîÑ **Ngu·ªìn d·ªØ li·ªáu**: H·ªá th·ªëng t·ª± ƒë·ªông s·ª≠ d·ª•ng VCI, DNSE, SSI (delay 15s/request)")
        
        if st.button("üîç T√¨m c∆° h·ªôi", type="primary"):
            self._get_top_opportunities_analysis(max_industries, max_stocks_per_industry)
    
    def _get_top_opportunities_analysis(self, max_industries: int, max_stocks_per_industry: int):
        """Get and display top opportunities."""
        with st.spinner("üîÑ ƒêang t√¨m ki·∫øm top c∆° h·ªôi ƒë·∫ßu t∆∞..."):
            try:
                opportunities = get_top_industry_opportunities(
                    max_industries=max_industries,
                    max_stocks_per_industry=max_stocks_per_industry
                )
                
                if not opportunities:
                    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c∆° h·ªôi ƒë·∫ßu t∆∞ n√†o")
                    return
                
                # Display opportunities
                for i, opportunity in enumerate(opportunities, 1):
                    with st.container():
                        st.markdown(f"### üèÖ #{i} - {opportunity.industry}")
                        
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.metric("ƒêi·ªÉm ng√†nh", f"{opportunity.industry_analysis.overall_score:.1f}/10")
                        
                        with col2:
                            st.metric("Khuy·∫øn ngh·ªã", opportunity.industry_analysis.recommendation)
                        
                        with col3:
                            st.metric("S·ªë c·ªï phi·∫øu", len(opportunity.stock_suggestions))
                        
                        # Top picks
                        if opportunity.stock_suggestions:
                            top_picks = opportunity.stock_suggestions[:3]
                            picks_text = " | ".join([f"{pick.symbol} ({pick.total_score:.1f})" for pick in top_picks])
                            st.markdown(f"**Top picks:** {picks_text}")
                        
                        st.markdown(f"**T√≥m t·∫Øt:** {opportunity.summary}")
                        
                        st.divider()
                
            except Exception as e:
                st.error(f"‚ùå L·ªói t√¨m ki·∫øm c∆° h·ªôi: {e}")
    
    def _render_industry_comparison(self):
        """Render industry comparison."""
        st.markdown("### ‚öñÔ∏è So s√°nh ng√†nh")
        
        # Get available industries
        try:
            available_industries = get_available_industries()
        except Exception as e:
            st.error(f"‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng√†nh: {e}")
            return
        
        # Industry selection
        selected_industries = st.multiselect(
            "Ch·ªçn c√°c ng√†nh ƒë·ªÉ so s√°nh:",
            available_industries,
            default=available_industries[:3] if len(available_industries) >= 3 else available_industries,
            help="Ch·ªçn √≠t nh·∫•t 2 ng√†nh ƒë·ªÉ so s√°nh"
        )
        
        if len(selected_industries) < 2:
            st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t 2 ng√†nh ƒë·ªÉ so s√°nh")
            return
        
        max_stocks_per_industry = st.slider("S·ªë c·ªï phi·∫øu m·ªói ng√†nh", 1, 3, 2, key="comparison_max_stocks")
        
        # Data source info
        st.info("üîÑ **Ngu·ªìn d·ªØ li·ªáu**: H·ªá th·ªëng t·ª± ƒë·ªông s·ª≠ d·ª•ng VCI, DNSE, SSI (delay 15s/request)")
        
        if st.button("‚öñÔ∏è So s√°nh", type="primary"):
            self._compare_industries_analysis(selected_industries, max_stocks_per_industry)
    
    def _compare_industries_analysis(self, industries: list, max_stocks_per_industry: int):
        """Compare industries and display results."""
        with st.spinner("üîÑ ƒêang so s√°nh c√°c ng√†nh..."):
            try:
                comparisons = compare_industries(
                    industries=industries,
                    max_stocks_per_industry=max_stocks_per_industry
                )
                
                if not comparisons:
                    st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ so s√°nh c√°c ng√†nh")
                    return
                
                # Create comparison chart
                comparison_data = []
                for comp in comparisons:
                    comparison_data.append({
                        "Ng√†nh": comp.industry,
                        "ƒêi·ªÉm t·ªïng th·ªÉ": comp.industry_analysis.overall_score,
                        "ƒêi·ªÉm momentum": comp.industry_analysis.momentum_score,
                        "ƒêi·ªÉm gi√° tr·ªã": comp.industry_analysis.value_score,
                        "ƒêi·ªÉm ch·∫•t l∆∞·ª£ng": comp.industry_analysis.quality_score,
                        "Khuy·∫øn ngh·ªã": comp.industry_analysis.recommendation,
                        "S·ªë c·ªï phi·∫øu": len(comp.stock_suggestions)
                    })
                
                df_comparison = pd.DataFrame(comparison_data)
                
                # Display comparison table
                st.markdown("### üìä B·∫£ng so s√°nh")
                st.dataframe(df_comparison, use_container_width=True, hide_index=True)
                
                # Charts
                col1, col2 = st.columns(2)
                
                with col1:
                    # Overall score comparison
                    fig_overall = px.bar(
                        df_comparison,
                        x="Ng√†nh",
                        y="ƒêi·ªÉm t·ªïng th·ªÉ",
                        title="So s√°nh ƒëi·ªÉm t·ªïng th·ªÉ",
                        color="ƒêi·ªÉm t·ªïng th·ªÉ",
                        color_continuous_scale="RdYlGn"
                    )
                    fig_overall.update_layout(xaxis_tickangle=-45)
                    st.plotly_chart(fig_overall, use_container_width=True)
                
                with col2:
                    # Score breakdown
                    fig_breakdown = px.bar(
                        df_comparison,
                        x="Ng√†nh",
                        y=["ƒêi·ªÉm momentum", "ƒêi·ªÉm gi√° tr·ªã", "ƒêi·ªÉm ch·∫•t l∆∞·ª£ng"],
                        title="Ph√¢n t√≠ch ƒëi·ªÉm s·ªë",
                        barmode="group"
                    )
                    fig_breakdown.update_layout(xaxis_tickangle=-45)
                    st.plotly_chart(fig_breakdown, use_container_width=True)
                
            except Exception as e:
                st.error(f"‚ùå L·ªói so s√°nh ng√†nh: {e}")
    
    def _render_industry_list(self):
        """Render industry list."""
        st.markdown("### üìã Danh s√°ch ng√†nh c√≥ s·∫µn")
        
        try:
            available_industries = get_available_industries()
            
            if not available_industries:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ ng√†nh n√†o c√≥ s·∫µn")
                return
            
            # Display industries in columns
            cols = st.columns(3)
            
            for i, industry in enumerate(available_industries):
                with cols[i % 3]:
                    st.markdown(f"‚Ä¢ {industry}")
            
            # Industry summary
            st.markdown("### üìä Th√¥ng tin ng√†nh")
            
            try:
                advisor = IndustryStockAdvisor()
                
                # Create summary data
                summary_data = []
                for industry in available_industries[:10]:  # Show first 10
                    try:
                        summary = advisor.get_industry_summary(industry)
                        if "error" not in summary:
                            summary_data.append({
                                "Ng√†nh": industry,
                                "S·ªë c·ªï phi·∫øu": summary["stock_count"],
                                "P/E ng√†nh": summary["benchmark"]["pe_ratio"],
                                "P/B ng√†nh": summary["benchmark"]["pb_ratio"],
                                "ROE ng√†nh": summary["benchmark"]["roe"],
                                "Bi·∫øn ƒë·ªông": summary["benchmark"]["volatility"] or "N/A"
                            })
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng√†nh {industry}: {e}")
                
                if summary_data:
                    df_summary = pd.DataFrame(summary_data)
                    st.dataframe(df_summary, use_container_width=True, hide_index=True)
                
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt: {e}")
        
        except Exception as e:
            st.error(f"‚ùå L·ªói l·∫•y danh s√°ch ng√†nh: {e}")
    
    def _render_settings(self):
        """Render settings and configuration."""
        st.markdown("## ‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng")
        
        # Analysis settings
        st.markdown("### üîß C√†i ƒë·∫∑t ph√¢n t√≠ch")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.number_input("Th·ªùi gian cache (ph√∫t)", min_value=1, max_value=60, value=30)
            st.selectbox("M√¥ h√¨nh AI", ["Gemini 2.0 Flash", "Gemini 1.5 Pro"])
            st.checkbox("T·ª± ƒë·ªông ph√¢n t√≠ch", value=False)
        
        with col2:
            st.number_input("S·ªë c·ªï phi·∫øu theo d√µi", min_value=5, max_value=50, value=20)
            st.selectbox("Ng√¥n ng·ªØ", ["Ti·∫øng Vi·ªát", "English"])
            st.checkbox("Th√¥ng b√°o email", value=False)
        
        # Export settings
        st.markdown("### üì§ C√†i ƒë·∫∑t xu·∫•t d·ªØ li·ªáu")
        
        export_format = st.selectbox("ƒê·ªãnh d·∫°ng m·∫∑c ƒë·ªãnh", ["PDF", "Excel", "JSON"])
        include_charts = st.checkbox("Bao g·ªìm bi·ªÉu ƒë·ªì", value=True)
        
        # System info
        st.markdown("### üìã Th√¥ng tin h·ªá th·ªëng")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("**Version:** 0.7.0")
            st.info("**Build:** Phase 4 Release")
            st.info("**Python:** 3.10+")
        
        with col2:
            st.info("**CrewAI:** Latest")
            st.info("**Streamlit:** 1.49.0")
            st.info("**Status:** ‚úÖ Active")
        
        # Clear data
        if st.button("üóëÔ∏è X√≥a d·ªØ li·ªáu ph√¢n t√≠ch", type="secondary"):
            st.session_state.analysis_history = []
            st.success("ƒê√£ x√≥a l·ªãch s·ª≠ ph√¢n t√≠ch!")

        st.markdown("### ü§ñ T√≠ch h·ª£p ChatGPT cho ph·∫ßn K·∫øt lu·∫≠n & Chi·∫øn l∆∞·ª£c")
        st.info("H·ªá th·ªëng t·ª± ƒë·ªông s·ª≠ d·ª•ng ChatGPT n·∫øu t√¨m th·∫•y `OPENAI_API_KEY` trong file .env")
        env_key_present = bool(os.environ.get('OPENAI_API_KEY'))
        if env_key_present:
            st.success("ƒê√£ ph√°t hi·ªán OPENAI_API_KEY t·ª´ .env. T·ª± ƒë·ªông b·∫≠t t·ªïng k·∫øt ChatGPT.")
            # ƒê·ªìng b·ªô l·∫°i session state t·ª´ m√¥i tr∆∞·ªùng ph√≤ng tr∆∞·ªùng h·ª£p thay ƒë·ªïi l√∫c runtime
            st.session_state.openai_api_key = os.environ.get('OPENAI_API_KEY', '')
            st.session_state.use_chatgpt_summary = True
        else:
            st.warning("Ch∆∞a t√¨m th·∫•y OPENAI_API_KEY trong .env. Vui l√≤ng th√™m bi·∫øn n√†y ƒë·ªÉ d√πng t·ªïng k·∫øt ChatGPT.")
    
    def _export_pdf(self, analysis: Dict[str, Any]):
        """Export analysis to PDF."""
        st.info("üì• T√≠nh nƒÉng xu·∫•t PDF ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...")
    
    def _export_excel(self, analysis: Dict[str, Any]):
        """Export analysis to Excel."""
        try:
            # Create sample Excel data
            df = pd.DataFrame({
                'M√£ c·ªï phi·∫øu': [analysis['symbol']],
                'Th·ªùi gian': [analysis['timestamp']],
                'Khuy·∫øn ngh·ªã': [analysis['recommendation']],
                'Ghi ch√∫': ['Ph√¢n t√≠ch t·ª± ƒë·ªông b·ªüi VN Stock Advisor']
            })
            
            # Convert to Excel
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name='Analysis')
            
            output.seek(0)
            
            st.download_button(
                label="üìä T·∫£i xu·ªëng Excel",
                data=output.getvalue(),
                file_name=f"{analysis['symbol']}_analysis_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        except Exception as e:
            st.error(f"L·ªói xu·∫•t Excel: {e}")
    
    def _save_favorite(self, symbol: str):
        """Save stock to favorites."""
        if symbol not in st.session_state.favorite_stocks:
            st.session_state.favorite_stocks.append(symbol)
            st.success(f"‚úÖ ƒê√£ l∆∞u {symbol} v√†o danh s√°ch y√™u th√≠ch!")
        else:
            st.info(f"{symbol} ƒë√£ c√≥ trong danh s√°ch y√™u th√≠ch!")
    
    def _render_stock_scanner(self):
        """Render stock scanner interface."""
        st.markdown("### üîç Qu√©t & X·∫øp h·∫°ng c·ªï phi·∫øu")
        st.markdown("Qu√©t v√† t√¨m c√°c c·ªï phi·∫øu c√≥ khuy·∫øn ngh·ªã MUA t·ªët nh·∫•t")
        
        if not MODULES_AVAILABLE:
            st.error("‚ùå Stock Scanner modules not available. Please check installation.")
            return
        
        # Scanner configuration
        col1, col2, col3 = st.columns(3)
        
        with col1:
            scan_type = st.selectbox(
                "üéØ Danh s√°ch qu√©t",
                ["VN30", "HNX30", "Custom List"],
                key="scan_type"
            )
        
        with col2:
            min_score = st.slider(
                "‚≠ê ƒêi·ªÉm t·ªëi thi·ªÉu",
                0.0, 10.0, 7.5, 0.1,
                help="Ch·ªâ hi·ªÉn th·ªã c·ªï phi·∫øu c√≥ ƒëi·ªÉm >= ng∆∞·ª°ng n√†y",
                key="min_score"
            )
        
        with col3:
            max_workers = st.selectbox(
                "üîß S·ªë thread",
                [1, 2, 3, 5],
                index=1,
                help="S·ªë l∆∞·ª£ng ph√¢n t√≠ch ƒë·ªìng th·ªùi (c·∫©n th·∫≠n v·ªõi API limits)",
                key="max_workers"
            )
        
        # Custom stock list input
        if scan_type == "Custom List":
            custom_stocks = st.text_area(
                "üìù Nh·∫≠p m√£ c·ªï phi·∫øu (c√°ch nhau b·∫±ng d·∫•u ph·∫©y)",
                placeholder="VIC, VHM, HPG, VCB, MSN",
                help="V√≠ d·ª•: VIC, VHM, HPG, VCB, MSN",
                key="custom_stocks"
            )
        
        # Scan button
        col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
        with col_btn2:
            scan_button = st.button(
                "üöÄ B·∫Øt ƒë·∫ßu qu√©t",
                type="primary",
                use_container_width=True,
                key="start_scan"
            )
        
        # Scan button and results
        if scan_button:
            try:
                # Prepare stock list based on selection
                if scan_type == "VN30":
                    stock_list = [
                        'VIC', 'VHM', 'VRE', 'VCB', 'BID', 'CTG', 'TCB', 'MBB', 'ACB', 'TPB',
                        'HPG', 'HSG', 'NKG', 'GVR', 'PLX', 'POW', 'GAS', 'VNM', 'MSN', 'MWG',
                        'FPT', 'VJC', 'HVN', 'SAB', 'BVH', 'CTD', 'PDR', 'KDH', 'DXG', 'STB'
                    ]
                elif scan_type == "HNX30":
                    stock_list = [
                        'SHB', 'PVS', 'CEO', 'TNG', 'VCS', 'IDC', 'NVB', 'PVB', 'THD', 'DTD',
                        'MBS', 'BVS', 'PVC', 'VIG', 'NDN', 'VC3', 'PVI', 'TIG', 'VND', 'HUT'
                    ]
                else:  # Custom List
                    if not custom_stocks:
                        st.error("‚ùå Vui l√≤ng nh·∫≠p danh s√°ch m√£ c·ªï phi·∫øu")
                        return
                    stock_list = [s.strip().upper() for s in custom_stocks.split(',') if s.strip()]
                
                if not stock_list:
                    st.error("‚ùå Danh s√°ch c·ªï phi·∫øu tr·ªëng")
                    return
                
                # Show progress
                st.info(f"üöÄ ƒêang qu√©t {len(stock_list)} m√£ c·ªï phi·∫øu...")
                progress_bar = st.progress(0)
                
                # Initialize scanner and run
                scanner = StockScanner(max_workers=max_workers)
                
                with st.spinner("ƒêang ph√¢n t√≠ch..."):
                    results = scanner.scan_stocks(
                        stock_list=stock_list,
                        min_score=min_score,
                        only_buy_recommendations=True
                    )
                
                progress_bar.progress(1.0)
                
                if results:
                    st.success(f"‚úÖ Ho√†n th√†nh! T√¨m th·∫•y {len(results)} khuy·∫øn ngh·ªã MUA")
                    self._display_scan_results(results)
                    
                    # Export options
                    if results:
                        self._render_export_options(results)
                else:
                    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªï phi·∫øu n√†o ƒë√°p ·ª©ng ti√™u ch√≠")
                    st.info("üí° Th·ª≠ gi·∫£m ƒëi·ªÉm t·ªëi thi·ªÉu ho·∫∑c ch·ªçn danh s√°ch kh√°c")
                    
            except Exception as e:
                st.error(f"‚ùå L·ªói khi qu√©t: {str(e)}")
                st.info("üí° C√≥ th·ªÉ do API limit ho·∫∑c l·ªói k·∫øt n·ªëi. Th·ª≠ l·∫°i sau √≠t ph√∫t.")
    
    def _display_scan_results(self, results: List[Dict]):
        """Display scanning results in a formatted table."""
        if not results:
            return
        
        st.markdown("### üìä K·∫øt qu·∫£ qu√©t")
        
        # Create DataFrame
        df_data = []
        for i, result in enumerate(results, 1):
            df_data.append({
                'Rank': i,
                'Symbol': result['symbol'],
                'Score': f"{result['total_score']:.1f}",
                'Decision': result['decision'],
                'Buy Price': f"{result['buy_price']:,.0f}" if result['buy_price'] else "N/A",
                'Target Price': f"{result['sell_price']:,.0f}" if result['sell_price'] else "N/A",
                'Potential': f"{((result['sell_price'] - result['buy_price']) / result['buy_price'] * 100):.1f}%" if result.get('buy_price') and result.get('sell_price') else "N/A"
            })
        
        df = pd.DataFrame(df_data)
        
        # Display table
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "Rank": st.column_config.NumberColumn("üèÜ", width="small"),
                "Symbol": st.column_config.TextColumn("üìä M√£", width="small"),
                "Score": st.column_config.TextColumn("‚≠ê ƒêi·ªÉm", width="small"),
                "Decision": st.column_config.TextColumn("üí° KN", width="small"),
                "Buy Price": st.column_config.TextColumn("üí∞ Mua", width="medium"),
                "Target Price": st.column_config.TextColumn("üéØ M·ª•c ti√™u", width="medium"),
                "Potential": st.column_config.TextColumn("üìà Ti·ªÅm nƒÉng", width="small")
            }
        )
        
        # Summary statistics
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìà T·ªïng khuy·∫øn ngh·ªã MUA", len(results))
        
        with col2:
            avg_score = sum(r['total_score'] for r in results) / len(results)
            st.metric("‚≠ê ƒêi·ªÉm TB", f"{avg_score:.1f}")
        
        with col3:
            top_score = results[0]['total_score'] if results else 0
            st.metric("üèÜ Cao nh·∫•t", f"{top_score:.1f}")
        
        with col4:
            potential_gains = []
            for r in results:
                if r.get('buy_price') and r.get('sell_price') and r['buy_price'] > 0:
                    gain = (r['sell_price'] - r['buy_price']) / r['buy_price'] * 100
                    potential_gains.append(gain)
            
            if potential_gains:
                avg_gain = sum(potential_gains) / len(potential_gains)
                st.metric("üìä Ti·ªÅm nƒÉng TB", f"{avg_gain:.1f}%")
            else:
                st.metric("üìä Ti·ªÅm nƒÉng TB", "N/A")
    
    def _render_export_options(self, results: List[Dict]):
        """Render export options for scan results."""
        st.markdown("### üì§ Xu·∫•t k·∫øt qu·∫£")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìÑ Xu·∫•t JSON", key="export_json"):
                import json
                json_data = json.dumps(results, ensure_ascii=False, indent=2)
                st.download_button(
                    "üíæ T·∫£i JSON",
                    data=json_data,
                    file_name=f"scan_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                )
        
        with col2:
            if st.button("üìä Xu·∫•t CSV", key="export_csv"):
                # Convert to CSV
                df_data = []
                for i, result in enumerate(results, 1):
                    df_data.append({
                        'Rank': i,
                        'Symbol': result['symbol'],
                        'Total_Score': result['total_score'],
                        'Decision': result['decision'],
                        'Buy_Price': result.get('buy_price', ''),
                        'Target_Price': result.get('sell_price', ''),
                        'Analysis_Date': result.get('analysis_date', '')
                    })
                
                df = pd.DataFrame(df_data)
                csv_data = df.to_csv(index=False)
                
                st.download_button(
                    "üíæ T·∫£i CSV",
                    data=csv_data,
                    file_name=f"scan_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
        
        with col3:
            if st.button("üìã T·∫°o b√°o c√°o", key="generate_report"):
                # Generate summary report
                try:
                    ranking_system = RankingSystem()
                    summary = ranking_system.generate_ranking_summary(results)
                    
                    st.text_area(
                        "üìä B√°o c√°o t√≥m t·∫Øt",
                        value=summary,
                        height=300,
                        key="summary_report"
                    )
                except Exception as e:
                    st.error(f"L·ªói t·∫°o b√°o c√°o: {e}")
    
    def _render_optimized_scanner(self):
        """Render optimized stock scanner interface."""
        from optimized_scanner_ui import render_optimized_stock_scanner, render_scanner_info_panel
        
        # Main scanner interface
        render_optimized_stock_scanner()
        
        # Add info panel at bottom
        st.markdown("---")
        render_scanner_info_panel()
    
    def _display_strategy_conclusion(self, analysis: Dict[str, Any]):
        """Display strategy and conclusion section."""
        symbol = analysis['symbol']
        
        # Strategy section
        st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
        st.markdown("### üéØ K·∫øt lu·∫≠n & Chi·∫øn l∆∞·ª£c")
        
        # Check if we have analysis results to synthesize strategy
        if analysis.get('ai_analysis') or (analysis.get('fundamental_data') and analysis.get('technical_data')):
            try:
                # Import strategy synthesizer
                from src.vn_stock_advisor.tools.strategy_synthesizer import StrategySynthesizerTool
                strategy_synthesizer = StrategySynthesizerTool()
                
                # Get analysis data
                fund_data = analysis.get('fundamental_data', '')
                tech_data = analysis.get('technical_data', '')
                macro_data = analysis.get('ai_analysis', '')
                current_price = analysis.get('current_price', 0.0)
                
                # Create strategy using synthesizer
                strategy_result = strategy_synthesizer._run(
                    symbol=symbol,
                    fundamental_analysis=fund_data,
                    technical_analysis=tech_data,
                    macro_analysis=macro_data,
                    current_price=current_price
                )
                
                # Display strategy in expandable section
                with st.expander("üìä Xem chi·∫øn l∆∞·ª£c chi ti·∫øt (H·ªá th·ªëng)", expanded=True):
                    st.markdown(strategy_result)

                # Optional: Summarize with ChatGPT if enabled
                if st.session_state.get('use_chatgpt_summary') and st.session_state.get('openai_api_key'):
                    try:
                        chatgpt_summary = self._summarize_with_chatgpt(
                            symbol=symbol,
                            fundamental_text=fund_data,
                            technical_text=tech_data,
                            system_strategy_md=strategy_result,
                            api_key=st.session_state.openai_api_key
                        )
                        with st.expander("üß† T·ªïng k·∫øt ChatGPT (K·∫æT LU·∫¨N & CHI·∫æN L∆Ø·ª¢C)", expanded=True):
                            st.markdown(chatgpt_summary)
                    except Exception as e:
                        st.warning(f"Kh√¥ng th·ªÉ t·ªïng k·∫øt b·∫±ng ChatGPT: {e}")
                
            except Exception as e:
                # Fallback to basic conclusion
                self._display_basic_conclusion(analysis)
                st.warning(f"S·ª≠ d·ª•ng t·ªïng k·∫øt c∆° b·∫£n do: {e}")
        else:
            # Display basic conclusion
            self._display_basic_conclusion(analysis)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    def _summarize_with_chatgpt(self, symbol: str, fundamental_text: str, technical_text: str, system_strategy_md: str, api_key: str) -> str:
        """Use OpenAI Chat Completions API to summarize conclusion & strategy in Vietnamese.

        Falls back to HTTP requests to avoid hard dependency on the OpenAI SDK.
        """
        # Compose prompt
        prompt = (
            f"B·∫°n l√† chuy√™n gia ch·ª©ng kho√°n Vi·ªát Nam. H√£y t·ªïng k·∫øt ng·∫Øn g·ªçn, r√µ r√†ng, theo c·∫•u tr√∫c d∆∞·ªõi ƒë√¢y cho m√£ {symbol}:\n\n"
            "1) Ph√¢n t√≠ch c∆° b·∫£n: d·ª±ng b·∫£ng ch·ªâ s·ªë (c·ªôt: Ch·ªâ s·ªë | Gi√° tr·ªã | Nh·∫≠n x√©t), t√≥m t·∫Øt ƒëi·ªÉm m·∫°nh/y·∫øu.\n"
            "2) Ph√¢n t√≠ch k·ªπ thu·∫≠t: xu h∆∞·ªõng (SMA/EMA), momentum (RSI, MACD), Bollinger/Kh·ªëi l∆∞·ª£ng, H·ªó tr·ª£/Kh√°ng c·ª±.\n"
            "3) K·∫øt lu·∫≠n t·ªïng th·ªÉ: g·∫°ch ƒë·∫ßu d√≤ng, ƒëi·ªÅu ki·ªán x√°c nh·∫≠n, c·∫£nh b√°o r·ªßi ro.\n"
            "4) Chi·∫øn l∆∞·ª£c: v√πng mua, ch·ªët l·ªùi (T1/T2/T3 n·∫øu h·ª£p l√Ω), stop-loss, t·ª∑ tr·ªçng khuy·∫øn ngh·ªã.\n\n"
            "Y√™u c·∫ßu: Vi·∫øt ti·∫øng Vi·ªát, s√∫c t√≠ch, c√≥ emoji nh·∫π nh√†ng. Kh√¥ng b·ªãa s·ªë li·ªáu n·∫øu kh√¥ng c√≥, h√£y d√πng nh·∫≠n x√©t ƒë·ªãnh t√≠nh khi thi·∫øu d·ªØ li·ªáu.\n"
            "N·∫øu c√≥ m√¢u thu·∫´n gi·ªØa c√°c ngu·ªìn, h√£y ghi ch√∫ ng·∫Øn g·ªçn.\n\n"
            "D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu ƒë·∫ßu v√†o: \n\n"
            f"[PH√ÇN T√çCH C∆† B·∫¢N]\n{fundamental_text}\n\n"
            f"[PH√ÇN T√çCH K·ª∏ THU·∫¨T]\n{technical_text}\n\n"
            f"[CHI·∫æN L∆Ø·ª¢C H·ªÜ TH·ªêNG]\n{system_strategy_md}\n\n"
            "H√£y xu·∫•t ra ·ªü ƒë·ªãnh d·∫°ng Markdown ƒë·∫πp, c√≥ ti√™u ƒë·ªÅ ph·ª• v√† danh s√°ch r√µ r√†ng."
        )

        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        # Prefer GPT-4o-mini for cost/speed; allow override via env
        model = os.environ.get('OPENAI_CHAT_MODEL', 'gpt-4o-mini')

        payload = {
            "model": model,
            "messages": [
                {"role": "system", "content": "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch ch·ª©ng kho√°n Vi·ªát Nam, tr·∫£ l·ªùi s√∫c t√≠ch."},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.3,
            "max_tokens": 1200
        }

        url = os.environ.get('OPENAI_API_BASE', 'https://api.openai.com') + '/v1/chat/completions'
        resp = requests.post(url, headers=headers, json=payload, timeout=60)
        if resp.status_code != 200:
            raise RuntimeError(f"OpenAI API l·ªói {resp.status_code}: {resp.text[:200]}")

        data = resp.json()
        content = data.get('choices', [{}])[0].get('message', {}).get('content', '')
        if not content:
            raise RuntimeError("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung t·ª´ OpenAI")
        return content

    def _display_basic_conclusion(self, analysis: Dict[str, Any]):
        """Display basic conclusion when full strategy synthesis is not available."""
        symbol = analysis['symbol']
        recommendation = analysis.get('recommendation', 'GI·ªÆ')
        
        # Basic conclusion
        st.markdown("#### üìã T√≥m t·∫Øt k·∫øt lu·∫≠n")
        
        # Extract basic info
        fund_data = analysis.get('fundamental_data', '')
        tech_data = analysis.get('technical_data', '')
        
        # Simple trend analysis
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üìà Xu h∆∞·ªõng k·ªπ thu·∫≠t:**")
            if any(word in tech_data.lower() for word in ['tƒÉng', 'upward', 'bullish']):
                st.success("üü¢ Xu h∆∞·ªõng tƒÉng")
            elif any(word in tech_data.lower() for word in ['gi·∫£m', 'downward', 'bearish']):
                st.error("üî¥ Xu h∆∞·ªõng gi·∫£m")
            else:
                st.warning("üü° Xu h∆∞·ªõng ƒëi ngang")
        
        with col2:
            st.markdown("**üí∞ ƒê·ªãnh gi√° c∆° b·∫£n:**")
            if any(word in fund_data.lower() for word in ['r·∫ª', 'undervalued', 'h·∫•p d·∫´n']):
                st.success("üü¢ ƒê·ªãnh gi√° h·∫•p d·∫´n")
            elif any(word in fund_data.lower() for word in ['ƒë·∫Øt', 'overvalued', 'cao']):
                st.error("üî¥ ƒê·ªãnh gi√° cao")
            else:
                st.info("üü° ƒê·ªãnh gi√° h·ª£p l√Ω")
        
        # Basic price targets (simplified)
        if recommendation in ['MUA', 'GI·ªÆ', 'BUY', 'HOLD']:
            st.markdown("#### üí∞ V√πng gi√° tham kh·∫£o")
            
            # Try to extract current price from data
            current_price = analysis.get('current_price', 0)
            if current_price == 0:
                # Try to extract from technical data
                import re
                price_patterns = [
                    r'([0-9,]+)\s*VND',
                    r'gi√°[:\s]*([0-9,]+)',
                    r'price[:\s]*([0-9,]+)'
                ]
                
                for pattern in price_patterns:
                    match = re.search(pattern, tech_data)
                    if match:
                        try:
                            current_price = float(match.group(1).replace(',', ''))
                            break
                        except:
                            continue
                
                if current_price == 0:
                    current_price = 25000  # Default estimate
            
            # Simple price calculations
            entry_min = current_price * 0.97
            entry_max = current_price * 1.03
            target_1 = current_price * 1.15
            target_2 = current_price * 1.25
            stop_loss = current_price * 0.92
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.info(f"""
                **üéØ V√πng mua:**  
                {entry_min:,.0f} - {entry_max:,.0f} VND
                """)
            
            with col2:
                st.success(f"""
                **üìà Ch·ªët l·ªùi:**  
                T1: {target_1:,.0f} VND (+{((target_1/current_price)-1)*100:.1f}%)  
                T2: {target_2:,.0f} VND (+{((target_2/current_price)-1)*100:.1f}%)
                """)
            
            with col3:
                st.error(f"""
                **‚õî Stop-loss:**  
                D∆∞·ªõi {stop_loss:,.0f} VND  
                (-{((1-stop_loss/current_price)*100):.1f}%)
                """)
        
        # Risk assessment
        st.markdown("#### ‚ö†Ô∏è ƒê√°nh gi√° r·ªßi ro")
        
        risk_factors = []
        if any(word in fund_data.lower() for word in ['cao', 'p/e']) and 'p/e' in fund_data.lower():
            risk_factors.append("P/E cao - r·ªßi ro ƒë·ªãnh gi√°")
        if any(word in tech_data.lower() for word in ['gi·∫£m', 'downward']):
            risk_factors.append("Xu h∆∞·ªõng k·ªπ thu·∫≠t ti√™u c·ª±c")
        if 'volume' in tech_data.lower() and any(word in tech_data.lower() for word in ['th·∫•p', 'low']):
            risk_factors.append("Volume th·∫•p - thanh kho·∫£n k√©m")
        
        if risk_factors:
            for risk in risk_factors:
                st.warning(f"‚ö†Ô∏è {risk}")
        else:
            st.success("‚úÖ R·ªßi ro ·ªü m·ª©c ch·∫•p nh·∫≠n ƒë∆∞·ª£c")

def main():
    """Main function to run the Streamlit app."""
    try:
        app = StockAnalysisApp()
        app.run()
        
        # Footer
        st.markdown("---")
        st.markdown("""
        <div style='text-align: center; color: #666;'>
            <p>üöÄ VN Stock Advisor v0.7.0 - Phase 4: User Experience & API Support</p>
            <p>Powered by CrewAI, Google Gemini, and Streamlit | Made with ‚ù§Ô∏è for Vietnamese investors</p>
        </div>
        """, unsafe_allow_html=True)
        
    except Exception as e:
        st.error(f"Application error: {e}")
        st.info("Please check the installation and try again.")

if __name__ == "__main__":
    main()
