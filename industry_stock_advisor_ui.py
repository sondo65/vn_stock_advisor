"""
Industry Stock Advisor UI - Giao di·ªán g·ª£i √Ω c·ªï phi·∫øu theo ng√†nh

Streamlit app ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng g·ª£i √Ω c·ªï phi·∫øu theo ng√†nh
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import json
from typing import List, Dict, Any

# Import our modules
try:
    from src.vn_stock_advisor.scanner import (
        IndustryStockAdvisor,
        suggest_industry_stocks,
        get_top_industry_opportunities,
        compare_industries,
        get_available_industries
    )
    MODULES_AVAILABLE = True
except ImportError as e:
    st.error(f"Kh√¥ng th·ªÉ import modules: {e}")
    MODULES_AVAILABLE = False

# Page config
st.set_page_config(
    page_title="Industry Stock Advisor",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .section-header {
        font-size: 1.5rem;
        font-weight: bold;
        color: #2c3e50;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
        margin: 0.5rem 0;
    }
    .recommendation-buy {
        background-color: #d4edda;
        color: #155724;
        padding: 0.5rem;
        border-radius: 0.25rem;
        font-weight: bold;
    }
    .recommendation-hold {
        background-color: #fff3cd;
        color: #856404;
        padding: 0.5rem;
        border-radius: 0.25rem;
        font-weight: bold;
    }
    .recommendation-sell {
        background-color: #f8d7da;
        color: #721c24;
        padding: 0.5rem;
        border-radius: 0.25rem;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

def main():
    """Main application"""
    
    # Header
    st.markdown('<h1 class="main-header">üìä Industry Stock Advisor</h1>', unsafe_allow_html=True)
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem;">
        <p style="font-size: 1.2rem; color: #666;">
            G·ª£i √Ω c·ªï phi·∫øu ti·ªÅm nƒÉng d·ª±a tr√™n ph√¢n t√≠ch k·ªπ thu·∫≠t v√† s·ªë li·ªáu th·ª±c t·∫ø theo t·ª´ng ng√†nh
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    if not MODULES_AVAILABLE:
        st.error("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng. Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t modules.")
        return
    
    # Sidebar
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è C√†i ƒë·∫∑t")
        
        # Analysis options
        st.markdown("### üìà T√πy ch·ªçn ph√¢n t√≠ch")
        max_stocks = st.slider("S·ªë c·ªï phi·∫øu t·ªëi ƒëa", 5, 20, 10)
        min_score = st.slider("ƒêi·ªÉm t·ªëi thi·ªÉu", 5.0, 9.0, 7.0, 0.1)
        include_analysis = st.checkbox("Bao g·ªìm ph√¢n t√≠ch chi ti·∫øt", value=True)
        
        # Cache options
        st.markdown("### üíæ Cache")
        if st.button("X√≥a cache"):
            try:
                advisor = IndustryStockAdvisor()
                advisor.clear_cache()
                st.success("‚úÖ ƒê√£ x√≥a cache")
            except Exception as e:
                st.error(f"‚ùå L·ªói x√≥a cache: {e}")
    
    # Main content tabs
    tab1, tab2, tab3, tab4 = st.tabs([
        "üè≠ G·ª£i √Ω theo ng√†nh", 
        "üèÜ Top c∆° h·ªôi", 
        "‚öñÔ∏è So s√°nh ng√†nh", 
        "üìã Danh s√°ch ng√†nh"
    ])
    
    with tab1:
        show_industry_suggestions(max_stocks, min_score, include_analysis)
    
    with tab2:
        show_top_opportunities(max_stocks, min_score)
    
    with tab3:
        show_industry_comparison(max_stocks, min_score)
    
    with tab4:
        show_industry_list()

def show_industry_suggestions(max_stocks: int, min_score: float, include_analysis: bool):
    """Hi·ªÉn th·ªã g·ª£i √Ω theo ng√†nh"""
    st.markdown('<h2 class="section-header">üè≠ G·ª£i √Ω c·ªï phi·∫øu theo ng√†nh</h2>', unsafe_allow_html=True)
    
    # Get available industries
    try:
        available_industries = get_available_industries()
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng√†nh: {e}")
        return
    
    # Industry selection
    col1, col2 = st.columns([2, 1])
    
    with col1:
        selected_industry = st.selectbox(
            "Ch·ªçn ng√†nh:",
            available_industries,
            help="Ch·ªçn ng√†nh ƒë·ªÉ xem g·ª£i √Ω c·ªï phi·∫øu"
        )
    
    with col2:
        if st.button("üîç Ph√¢n t√≠ch", type="primary"):
            analyze_industry(selected_industry, max_stocks, min_score, include_analysis)

def analyze_industry(industry: str, max_stocks: int, min_score: float, include_analysis: bool):
    """Ph√¢n t√≠ch ng√†nh v√† hi·ªÉn th·ªã k·∫øt qu·∫£"""
    
    with st.spinner(f"üîÑ ƒêang ph√¢n t√≠ch ng√†nh {industry}..."):
        try:
            advisor = IndustryStockAdvisor()
            recommendation = advisor.get_industry_recommendation(
                industry=industry,
                max_stocks=max_stocks,
                min_score=min_score,
                include_analysis=include_analysis
            )
            
            if not recommendation:
                st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y g·ª£i √Ω n√†o cho ng√†nh {industry}")
                return
            
            # Display results
            display_industry_recommendation(recommendation)
            
        except Exception as e:
            st.error(f"‚ùå L·ªói ph√¢n t√≠ch ng√†nh: {e}")

def display_industry_recommendation(recommendation):
    """Hi·ªÉn th·ªã khuy·∫øn ngh·ªã ng√†nh"""
    
    # Industry overview
    st.markdown('<h3 class="section-header">üìä T·ªïng quan ng√†nh</h3>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "ƒêi·ªÉm t·ªïng th·ªÉ",
            f"{recommendation.industry_analysis.overall_score:.1f}/10",
            delta=f"{recommendation.industry_analysis.overall_score - 7.0:.1f}"
        )
    
    with col2:
        st.metric(
            "Xu h∆∞·ªõng",
            recommendation.industry_analysis.trend.value.upper(),
            delta=None
        )
    
    with col3:
        st.metric(
            "Khuy·∫øn ngh·ªã",
            recommendation.industry_analysis.recommendation,
            delta=None
        )
    
    with col4:
        st.metric(
            "ƒê·ªô tin c·∫≠y",
            f"{recommendation.confidence:.1%}",
            delta=None
        )
    
    # Summary
    st.markdown("### üìù T√≥m t·∫Øt")
    st.info(recommendation.summary)
    
    # Key insights
    st.markdown("### üí° Insights ch√≠nh")
    for insight in recommendation.key_insights:
        st.markdown(f"‚Ä¢ {insight}")
    
    # Risk factors
    st.markdown("### ‚ö†Ô∏è R·ªßi ro")
    for risk in recommendation.risk_factors:
        st.markdown(f"‚Ä¢ {risk}")
    
    # Investment strategy
    st.markdown("### üéØ Chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞")
    st.success(recommendation.investment_strategy)
    
    # Stock suggestions
    st.markdown('<h3 class="section-header">üìà G·ª£i √Ω c·ªï phi·∫øu</h3>', unsafe_allow_html=True)
    
    if recommendation.stock_suggestions:
        # Create DataFrame for display
        stocks_data = []
        for stock in recommendation.stock_suggestions:
            stocks_data.append({
                "M√£": stock.symbol,
                "T√™n c√¥ng ty": stock.company_name,
                "ƒêi·ªÉm t·ªïng": f"{stock.total_score:.1f}",
                "ƒêi·ªÉm gi√° tr·ªã": f"{stock.value_score:.1f}",
                "ƒêi·ªÉm momentum": f"{stock.momentum_score:.1f}",
                "ƒêi·ªÉm ch·∫•t l∆∞·ª£ng": f"{stock.quality_score:.1f}",
                "Khuy·∫øn ngh·ªã": stock.recommendation,
                "ƒê·ªô tin c·∫≠y": f"{stock.confidence:.1%}",
                "R·ªßi ro": stock.risk_level,
                "Gi√° m·ª•c ti√™u": f"{stock.target_price:,.0f}" if stock.target_price else "N/A"
            })
        
        df = pd.DataFrame(stocks_data)
        
        # Display table with styling
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True
        )
        
        # Charts
        col1, col2 = st.columns(2)
        
        with col1:
            # Score distribution
            fig_scores = px.bar(
                df,
                x="M√£",
                y=["ƒêi·ªÉm gi√° tr·ªã", "ƒêi·ªÉm momentum", "ƒêi·ªÉm ch·∫•t l∆∞·ª£ng"],
                title="Ph√¢n b·ªë ƒëi·ªÉm s·ªë",
                barmode="group"
            )
            st.plotly_chart(fig_scores, use_container_width=True)
        
        with col2:
            # Recommendation distribution
            rec_counts = df["Khuy·∫øn ngh·ªã"].value_counts()
            fig_rec = px.pie(
                values=rec_counts.values,
                names=rec_counts.index,
                title="Ph√¢n b·ªë khuy·∫øn ngh·ªã"
            )
            st.plotly_chart(fig_rec, use_container_width=True)
        
        # Detailed analysis for each stock
        if include_analysis:
            st.markdown("### üîç Ph√¢n t√≠ch chi ti·∫øt")
            
            for i, stock in enumerate(recommendation.stock_suggestions[:5]):  # Show top 5
                with st.expander(f"üìä {stock.symbol} - {stock.company_name} (ƒêi·ªÉm: {stock.total_score:.1f})"):
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**üìà Ph√¢n t√≠ch ƒë·ªãnh gi√°:**")
                        st.write(stock.valuation_analysis)
                        
                        st.markdown("**üìä Ph√¢n t√≠ch k·ªπ thu·∫≠t:**")
                        st.write(stock.technical_analysis)
                    
                    with col2:
                        st.markdown("**üè≠ V·ªã th·∫ø ng√†nh:**")
                        st.write(stock.industry_position)
                        
                        st.markdown("**üöÄ Ti·ªÅm nƒÉng tƒÉng tr∆∞·ªüng:**")
                        st.write(stock.growth_potential)
    else:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ g·ª£i √Ω c·ªï phi·∫øu n√†o ƒë·∫°t ti√™u ch√≠")

def show_top_opportunities(max_stocks: int, min_score: float):
    """Hi·ªÉn th·ªã top c∆° h·ªôi ƒë·∫ßu t∆∞"""
    st.markdown('<h2 class="section-header">üèÜ Top c∆° h·ªôi ƒë·∫ßu t∆∞ theo ng√†nh</h2>', unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        max_industries = st.slider("S·ªë ng√†nh t·ªëi ƒëa", 3, 10, 5)
    
    with col2:
        if st.button("üîç T√¨m c∆° h·ªôi", type="primary"):
            get_top_opportunities_analysis(max_industries, max_stocks, min_score)

def get_top_opportunities_analysis(max_industries: int, max_stocks: int, min_score: float):
    """L·∫•y v√† hi·ªÉn th·ªã top c∆° h·ªôi"""
    
    with st.spinner("üîÑ ƒêang t√¨m ki·∫øm top c∆° h·ªôi ƒë·∫ßu t∆∞..."):
        try:
            opportunities = get_top_industry_opportunities(
                max_industries=max_industries,
                max_stocks_per_industry=max_stocks
            )
            
            if not opportunities:
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c∆° h·ªôi ƒë·∫ßu t∆∞ n√†o")
                return
            
            # Display opportunities
            for i, opportunity in enumerate(opportunities, 1):
                with st.container():
                    st.markdown(f"### üèÖ #{i} - {opportunity.industry}")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("ƒêi·ªÉm ng√†nh", f"{opportunity.industry_analysis.overall_score:.1f}/10")
                    
                    with col2:
                        st.metric("Khuy·∫øn ngh·ªã", opportunity.industry_analysis.recommendation)
                    
                    with col3:
                        st.metric("S·ªë c·ªï phi·∫øu", len(opportunity.stock_suggestions))
                    
                    # Top picks
                    if opportunity.stock_suggestions:
                        top_picks = opportunity.stock_suggestions[:3]
                        picks_text = " | ".join([f"{pick.symbol} ({pick.total_score:.1f})" for pick in top_picks])
                        st.markdown(f"**Top picks:** {picks_text}")
                    
                    st.markdown(f"**T√≥m t·∫Øt:** {opportunity.summary}")
                    
                    st.divider()
            
        except Exception as e:
            st.error(f"‚ùå L·ªói t√¨m ki·∫øm c∆° h·ªôi: {e}")

def show_industry_comparison(max_stocks: int, min_score: float):
    """Hi·ªÉn th·ªã so s√°nh ng√†nh"""
    st.markdown('<h2 class="section-header">‚öñÔ∏è So s√°nh ng√†nh</h2>', unsafe_allow_html=True)
    
    # Get available industries
    try:
        available_industries = get_available_industries()
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng√†nh: {e}")
        return
    
    # Industry selection
    selected_industries = st.multiselect(
        "Ch·ªçn c√°c ng√†nh ƒë·ªÉ so s√°nh:",
        available_industries,
        default=available_industries[:3] if len(available_industries) >= 3 else available_industries,
        help="Ch·ªçn √≠t nh·∫•t 2 ng√†nh ƒë·ªÉ so s√°nh"
    )
    
    if len(selected_industries) < 2:
        st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t 2 ng√†nh ƒë·ªÉ so s√°nh")
        return
    
    if st.button("‚öñÔ∏è So s√°nh", type="primary"):
        compare_industries_analysis(selected_industries, max_stocks, min_score)

def compare_industries_analysis(industries: List[str], max_stocks: int, min_score: float):
    """So s√°nh c√°c ng√†nh"""
    
    with st.spinner("üîÑ ƒêang so s√°nh c√°c ng√†nh..."):
        try:
            comparisons = compare_industries(
                industries=industries,
                max_stocks_per_industry=max_stocks
            )
            
            if not comparisons:
                st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ so s√°nh c√°c ng√†nh")
                return
            
            # Create comparison chart
            comparison_data = []
            for comp in comparisons:
                comparison_data.append({
                    "Ng√†nh": comp.industry,
                    "ƒêi·ªÉm t·ªïng th·ªÉ": comp.industry_analysis.overall_score,
                    "ƒêi·ªÉm momentum": comp.industry_analysis.momentum_score,
                    "ƒêi·ªÉm gi√° tr·ªã": comp.industry_analysis.value_score,
                    "ƒêi·ªÉm ch·∫•t l∆∞·ª£ng": comp.industry_analysis.quality_score,
                    "Khuy·∫øn ngh·ªã": comp.industry_analysis.recommendation,
                    "S·ªë c·ªï phi·∫øu": len(comp.stock_suggestions)
                })
            
            df_comparison = pd.DataFrame(comparison_data)
            
            # Display comparison table
            st.markdown("### üìä B·∫£ng so s√°nh")
            st.dataframe(df_comparison, use_container_width=True, hide_index=True)
            
            # Charts
            col1, col2 = st.columns(2)
            
            with col1:
                # Overall score comparison
                fig_overall = px.bar(
                    df_comparison,
                    x="Ng√†nh",
                    y="ƒêi·ªÉm t·ªïng th·ªÉ",
                    title="So s√°nh ƒëi·ªÉm t·ªïng th·ªÉ",
                    color="ƒêi·ªÉm t·ªïng th·ªÉ",
                    color_continuous_scale="RdYlGn"
                )
                fig_overall.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig_overall, use_container_width=True)
            
            with col2:
                # Score breakdown
                fig_breakdown = px.bar(
                    df_comparison,
                    x="Ng√†nh",
                    y=["ƒêi·ªÉm momentum", "ƒêi·ªÉm gi√° tr·ªã", "ƒêi·ªÉm ch·∫•t l∆∞·ª£ng"],
                    title="Ph√¢n t√≠ch ƒëi·ªÉm s·ªë",
                    barmode="group"
                )
                fig_breakdown.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig_breakdown, use_container_width=True)
            
            # Detailed comparison
            st.markdown("### üîç So s√°nh chi ti·∫øt")
            
            for comp in comparisons:
                with st.expander(f"üìä {comp.industry} - ƒêi·ªÉm: {comp.industry_analysis.overall_score:.1f}"):
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**üìà ƒêi·ªÉm s·ªë:**")
                        st.write(f"‚Ä¢ T·ªïng th·ªÉ: {comp.industry_analysis.overall_score:.1f}/10")
                        st.write(f"‚Ä¢ Momentum: {comp.industry_analysis.momentum_score:.1f}/10")
                        st.write(f"‚Ä¢ Gi√° tr·ªã: {comp.industry_analysis.value_score:.1f}/10")
                        st.write(f"‚Ä¢ Ch·∫•t l∆∞·ª£ng: {comp.industry_analysis.quality_score:.1f}/10")
                        
                        st.markdown("**üìä Th·ªëng k√™:**")
                        st.write(f"‚Ä¢ P/E trung b√¨nh: {comp.industry_analysis.avg_pe:.1f}")
                        st.write(f"‚Ä¢ P/B trung b√¨nh: {comp.industry_analysis.avg_pb:.1f}")
                        st.write(f"‚Ä¢ ROE trung b√¨nh: {comp.industry_analysis.avg_roe:.1f}%")
                    
                    with col2:
                        st.markdown("**üí° Insights:**")
                        for insight in comp.key_insights:
                            st.write(f"‚Ä¢ {insight}")
                        
                        st.markdown("**‚ö†Ô∏è R·ªßi ro:**")
                        for risk in comp.risk_factors[:3]:  # Show top 3 risks
                            st.write(f"‚Ä¢ {risk}")
                    
                    # Top stocks
                    if comp.stock_suggestions:
                        st.markdown("**üèÜ Top c·ªï phi·∫øu:**")
                        top_stocks = comp.stock_suggestions[:3]
                        for stock in top_stocks:
                            st.write(f"‚Ä¢ {stock.symbol}: {stock.total_score:.1f}/10 ({stock.recommendation})")
            
        except Exception as e:
            st.error(f"‚ùå L·ªói so s√°nh ng√†nh: {e}")

def show_industry_list():
    """Hi·ªÉn th·ªã danh s√°ch ng√†nh"""
    st.markdown('<h2 class="section-header">üìã Danh s√°ch ng√†nh c√≥ s·∫µn</h2>', unsafe_allow_html=True)
    
    try:
        available_industries = get_available_industries()
        
        if not available_industries:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ ng√†nh n√†o c√≥ s·∫µn")
            return
        
        # Display industries in columns
        cols = st.columns(3)
        
        for i, industry in enumerate(available_industries):
            with cols[i % 3]:
                st.markdown(f"‚Ä¢ {industry}")
        
        # Industry summary
        st.markdown("### üìä Th√¥ng tin ng√†nh")
        
        try:
            advisor = IndustryStockAdvisor()
            
            # Create summary data
            summary_data = []
            for industry in available_industries[:10]:  # Show first 10
                try:
                    summary = advisor.get_industry_summary(industry)
                    if "error" not in summary:
                        summary_data.append({
                            "Ng√†nh": industry,
                            "S·ªë c·ªï phi·∫øu": summary["stock_count"],
                            "P/E ng√†nh": summary["benchmark"]["pe_ratio"],
                            "P/B ng√†nh": summary["benchmark"]["pb_ratio"],
                            "ROE ng√†nh": summary["benchmark"]["roe"],
                            "Bi·∫øn ƒë·ªông": summary["benchmark"]["volatility"] or "N/A"
                        })
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng√†nh {industry}: {e}")
            
            if summary_data:
                df_summary = pd.DataFrame(summary_data)
                st.dataframe(df_summary, use_container_width=True, hide_index=True)
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt: {e}")
    
    except Exception as e:
        st.error(f"‚ùå L·ªói l·∫•y danh s√°ch ng√†nh: {e}")

if __name__ == "__main__":
    main()
