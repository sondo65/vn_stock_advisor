"""
C√¥ng c·ª• ph√¢n t√≠ch c∆° b·∫£n ch√≠nh x√°c s·ª≠ d·ª•ng P/E Calculator
"""
from typing import Type, Optional, Any
from crewai.tools import BaseTool
from pydantic import BaseModel, Field
from vnstock import Vnstock
from datetime import datetime, timedelta
import pandas as pd
import numpy as np

# Import P/E Calculator
try:
    from .pe_calculator import PECalculator
    PE_CALCULATOR_AVAILABLE = True
except ImportError:
    PE_CALCULATOR_AVAILABLE = False
    print("Warning: P/E Calculator not available")


class AccurateFundamentalInput(BaseModel):
    """Input schema for AccurateFundamentalTool."""
    symbol: str = Field(..., description="M√£ c·ªï phi·∫øu c·∫ßn ph√¢n t√≠ch")


class AccurateFundamentalTool(BaseTool):
    """C√¥ng c·ª• ph√¢n t√≠ch c∆° b·∫£n ch√≠nh x√°c tr√°nh thi√™n ki·∫øn d·ªØ li·ªáu"""
    
    name: str = "C√¥ng c·ª• ph√¢n t√≠ch c∆° b·∫£n ch√≠nh x√°c"
    description: str = "C√¥ng c·ª• ph√¢n t√≠ch c∆° b·∫£n s·ª≠ d·ª•ng P/E Calculator ƒë·ªÉ tr√°nh thi√™n ki·∫øn d·ªØ li·ªáu, cung c·∫•p c√°c ch·ªâ s·ªë t√†i ch√≠nh ch√≠nh x√°c nh∆∞ P/E, P/B, ROE, ROA, EPS, D/E, bi√™n l·ª£i nhu·∫≠n v√† EV/EBITDA."
    args_schema: Type[BaseModel] = AccurateFundamentalInput

    def _run(self, symbol: str) -> str:
        try:
            # Use real data with better error handling and caching
            import time
            import random
            
            # Add random delay to avoid rate limiting
            time.sleep(random.uniform(1, 3))
            
            # Try multiple sources with proper error handling
            sources = ["VCI", "DNSE", "SSI"]
            stock = None
            company = None
            
            for source in sources:
                try:
                    print(f"Trying {source} for {symbol}...")
                    stock = Vnstock().stock(symbol=symbol, source=source)
                    company = Vnstock().stock(symbol=symbol, source=source).company
                    print(f"Successfully got data from {source}")
                    break
                except Exception as e:
                    print(f"Source {source} failed: {str(e)[:100]}...")
                    continue
            
            if stock is None:
                raise Exception("All data sources failed")
                
            financial_ratios = stock.finance.ratio(period="quarter")
            income_df = stock.finance.income_statement(period="quarter")

            # Get company full name & industry with error handling
            try:
                profile_data = company.profile().get("company_name")
                full_name = profile_data.iloc[0] if not profile_data.empty else f"Company {symbol}"
            except (IndexError, AttributeError):
                full_name = f"Company {symbol}"
            
            try:
                overview_data = company.overview().get("industry")
                industry = overview_data.iloc[0] if not overview_data.empty else "Unknown"
            except (IndexError, AttributeError):
                industry = "Unknown"

            # Get data from the latest row of DataFrame for financial ratios with error handling
            if financial_ratios.empty:
                return f"Kh√¥ng c√≥ d·ªØ li·ªáu t√†i ch√≠nh cho c·ªï phi·∫øu {symbol}"
            
            latest_ratios = financial_ratios.iloc[0]

            # Get last 4 quarters of income statement with error handling
            if income_df.empty:
                quarterly_trends = ["Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o thu nh·∫≠p"]
            else:
                last_4_quarters = income_df.head(4)
            
            # Extract financial ratios data - handle both TCBS and VCI formats
            try:
                # Try VCI format first (multi-level columns)
                pe_ratio = latest_ratios.get(('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'P/E'), "N/A")
                pb_ratio = latest_ratios.get(('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'P/B'), "N/A")
                roe = latest_ratios.get(('Ch·ªâ ti√™u kh·∫£ nƒÉng sinh l·ª£i', 'ROE (%)'), "N/A")
                roa = latest_ratios.get(('Ch·ªâ ti√™u kh·∫£ nƒÉng sinh l·ª£i', 'ROA (%)'), "N/A")
                eps = latest_ratios.get(('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'EPS (VND)'), "N/A")
                de = latest_ratios.get(('Ch·ªâ ti√™u c∆° c·∫•u ngu·ªìn v·ªën', 'Debt/Equity'), "N/A")
                profit_margin = latest_ratios.get(('Ch·ªâ ti√™u kh·∫£ nƒÉng sinh l·ª£i', 'Gross Profit Margin (%)'), "N/A")
                evebitda = latest_ratios.get(('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'EV/EBITDA'), "N/A")
            except:
                # Fallback to TCBS format
                pe_ratio = latest_ratios.get("price_to_earning", "N/A")
                pb_ratio = latest_ratios.get("price_to_book", "N/A")
                roe = latest_ratios.get("roe", "N/A")
                roa = latest_ratios.get("roa", "N/A")
                eps = latest_ratios.get("earning_per_share", "N/A")
                de = latest_ratios.get("debt_on_equity", "N/A")
                profit_margin = latest_ratios.get("gross_profit_margin", "N/A")
                evebitda = latest_ratios.get("value_before_ebitda", "N/A")
            
            # Calculate accurate P/E using P/E Calculator to avoid data bias
            accurate_pe_data = None
            bias_analysis = ""
            
            if PE_CALCULATOR_AVAILABLE:
                try:
                    pe_calculator = PECalculator()
                    accurate_pe_data = pe_calculator.calculate_accurate_pe(symbol, use_diluted_eps=True)
                    
                    # Use accurate P/E if available
                    if accurate_pe_data and "pe_ratio" in accurate_pe_data and accurate_pe_data["pe_ratio"]:
                        pe_ratio = accurate_pe_data["pe_ratio"]
                        eps = accurate_pe_data["eps_used"]
                        
                        # Add bias analysis
                        if "pe_difference" in accurate_pe_data and accurate_pe_data["pe_difference"]:
                            pe_difference = accurate_pe_data["pe_difference"]
                            if abs(pe_difference) > 0.5:
                                bias_analysis = f"""
            
            ‚ö†Ô∏è PH√ÇN T√çCH THI√äN KI·∫æN P/E:
            - P/E ch√≠nh x√°c: {accurate_pe_data.get('pe_ratio', 'N/A')}
            - P/E t·ª´ ngu·ªìn: {accurate_pe_data.get('source_pe', 'N/A')}
            - Ch√™nh l·ªách: {pe_difference:.2f}
            - Ph∆∞∆°ng ph√°p: {accurate_pe_data.get('calculation_method', 'N/A')}
            - C·∫≠p nh·∫≠t: {accurate_pe_data.get('last_updated', 'N/A')}
            
            üìä CHI TI·∫æT T√çNH TO√ÅN:
            - L·ª£i nhu·∫≠n TTM: {accurate_pe_data.get('net_income_ttm', 'N/A'):,.0f} VND
            - C·ªï phi·∫øu l∆∞u h√†nh: {accurate_pe_data.get('shares_outstanding', 'N/A'):,.0f} cp
            - EPS Basic: {accurate_pe_data.get('eps_basic', 'N/A'):,.0f} VND
            - EPS Diluted: {accurate_pe_data.get('eps_diluted', 'N/A'):,.0f} VND
            - Gi√° hi·ªán t·∫°i: {accurate_pe_data.get('current_price', 'N/A'):,.0f} VND
            """
                    
                    # Detect bias issues
                    bias_detection = pe_calculator.detect_pe_bias(symbol)
                    if "bias_detected" in bias_detection and bias_detection["bias_detected"]:
                        bias_analysis += f"""
            
            üö® C√ÅC THI√äN KI·∫æN PH√ÅT HI·ªÜN:
            {chr(10).join([f"- {bias}" for bias in bias_detection["bias_detected"]])}
            
            üí° KHUY·∫æN NGH·ªä:
            {chr(10).join([f"- {rec}" for rec in bias_detection["recommendations"]])}
            """
                        
                except Exception as e:
                    print(f"Warning: Could not calculate accurate P/E: {e}")
                    bias_analysis = f"\n‚ö†Ô∏è Kh√¥ng th·ªÉ t√≠nh P/E ch√≠nh x√°c: {str(e)}"

            # Format quarterly income data only if we have data
            if 'last_4_quarters' in locals() and not last_4_quarters.empty:
                quarterly_trends = []
                for i, (_, quarter) in enumerate(last_4_quarters.iterrows()):
                    try:
                        # Detect and normalize units
                        # Revenue
                        revenue = quarter.get("Revenue (Bn. VND)", None)
                        if isinstance(revenue, (int, float)):
                            revenue_bn = revenue if revenue < 1e7 else revenue / 1e9
                            revenue_str = f"{revenue_bn:,.0f} t·ªâ ƒë·ªìng"
                        else:
                            revenue_str = "N/A"
                        # Gross Profit
                        gross_profit = quarter.get("Gross Profit", None)
                        if isinstance(gross_profit, (int, float)):
                            # Assume VND
                            gp_bn = gross_profit / 1e9 if gross_profit >= 1e7 else gross_profit
                            gross_profit_str = f"{gp_bn:,.0f} t·ªâ ƒë·ªìng" if gross_profit >= 1e7 else f"{gp_bn:,.0f} VND"
                        else:
                            gross_profit_str = "N/A"
                        # Net Profit For the Year
                        post_tax_profit = quarter.get("Net Profit For the Year", None)
                        if isinstance(post_tax_profit, (int, float)):
                            npty_bn = post_tax_profit / 1e9 if post_tax_profit >= 1e7 else post_tax_profit
                            post_tax_profit_str = f"{npty_bn:,.0f} t·ªâ ƒë·ªìng" if post_tax_profit >= 1e7 else f"{npty_bn:,.0f} VND"
                        else:
                            post_tax_profit_str = "N/A"

                        quarter_info = f"""
                        Qu√Ω T - {i + 1}:
                        - Doanh thu thu·∫ßn: {revenue_str}
                        - L·ª£i nhu·∫≠n g·ªôp: {gross_profit_str}
                        - L·ª£i nhu·∫≠n sau thu·∫ø: {post_tax_profit_str}
                        """
                        quarterly_trends.append(quarter_info)
                    except Exception:
                        quarterly_trends.append(f"Qu√Ω T - {i + 1}: L·ªói d·ªØ li·ªáu")
            else:
                quarterly_trends = ["Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o thu nh·∫≠p"]
            
            return f"""M√£ c·ªï phi·∫øu: {symbol}
            T√™n c√¥ng ty: {full_name}
            Ng√†nh: {industry}
            Ng√†y ph√¢n t√≠ch: {datetime.now().strftime('%Y-%m-%d')}
            
            T·ª∑ l·ªá P/E: {pe_ratio}
            T·ª∑ l·ªá P/B: {pb_ratio}
            T·ª∑ l·ªá ROE: {roe}
            T·ª∑ l·ªá ROA: {roa}
            Bi√™n l·ª£i nhu·∫≠n: {profit_margin}
            L·ª£i nhu·∫≠n tr√™n m·ªói c·ªï phi·∫øu EPS (VND): {eps}
            H·ªá s·ªë n·ª£ tr√™n v·ªën ch·ªß s·ªü h·ªØu D/E: {de}
            T·ª∑ l·ªá EV/EBITDA: {evebitda}
            {bias_analysis}

            XU H∆Ø·ªöNG 4 QU√ù G·∫¶N NH·∫§T:
            {"".join(quarterly_trends)}
            """
        except Exception as e:
            return f"L·ªói khi l·∫•y d·ªØ li·ªáu: {e}"
