"""
Ranking System - H·ªá th·ªëng ch·∫•m ƒëi·ªÉm v√† x·∫øp h·∫°ng c·ªï phi·∫øu
"""
import re
from typing import Dict, List, Optional


class RankingSystem:
    """H·ªá th·ªëng ch·∫•m ƒëi·ªÉm v√† x·∫øp h·∫°ng c·ªï phi·∫øu"""
    
    def __init__(self):
        """Initialize ranking system with scoring weights"""
        self.weights = {
            'fundamental': 0.4,  # 40% tr·ªçng s·ªë cho ph√¢n t√≠ch c∆° b·∫£n
            'technical': 0.3,    # 30% tr·ªçng s·ªë cho ph√¢n t√≠ch k·ªπ thu·∫≠t
            'macro': 0.2,        # 20% tr·ªçng s·ªë cho ph√¢n t√≠ch vƒ© m√¥
            'sentiment': 0.1     # 10% tr·ªçng s·ªë cho sentiment
        }
        
        # Scoring criteria
        self.fundamental_criteria = {
            'pe_good': 2.0,      # P/E h·ª£p l√Ω
            'pb_good': 1.5,      # P/B h·∫•p d·∫´n
            'roe_high': 2.0,     # ROE cao
            'debt_low': 1.5,     # N·ª£ th·∫•p
            'profit_growth': 2.0, # TƒÉng tr∆∞·ªüng l·ª£i nhu·∫≠n
            'revenue_growth': 1.0 # TƒÉng tr∆∞·ªüng doanh thu
        }
        
        self.technical_criteria = {
            'trend_up': 2.0,     # Xu h∆∞·ªõng tƒÉng
            'rsi_good': 1.0,     # RSI t·ªët
            'macd_positive': 1.5, # MACD t√≠ch c·ª±c
            'volume_good': 1.0,   # Kh·ªëi l∆∞·ª£ng t·ªët
            'support_strong': 1.5 # H·ªó tr·ª£ m·∫°nh
        }
    
    def extract_score_from_reasoning(self, reasoning: str, criteria: Dict[str, float]) -> float:
        """
        Tr√≠ch xu·∫•t ƒëi·ªÉm t·ª´ text reasoning
        
        Args:
            reasoning: Text m√¥ t·∫£ ph√¢n t√≠ch
            criteria: Dict c√°c ti√™u ch√≠ ch·∫•m ƒëi·ªÉm
            
        Returns:
            ƒêi·ªÉm s·ªë t·ª´ 0-10
        """
        if not reasoning:
            return 0.0
            
        score = 0.0
        reasoning_lower = reasoning.lower()
        
        # ƒê·∫øm c√°c t·ª´ kh√≥a t√≠ch c·ª±c
        positive_keywords = [
            't·ªët', 'tƒÉng', 'm·∫°nh', 'cao', 'h·∫•p d·∫´n', '·ªïn ƒë·ªãnh', 't√≠ch c·ª±c',
            'good', 'strong', 'high', 'positive', 'stable', 'attractive'
        ]
        
        negative_keywords = [
            'x·∫•u', 'gi·∫£m', 'y·∫øu', 'th·∫•p', 'r·ªßi ro', 'ti√™u c·ª±c', 'k√©m',
            'bad', 'weak', 'low', 'negative', 'poor', 'decline'
        ]
        
        # T√≠nh ƒëi·ªÉm d·ª±a tr√™n t·ª´ kh√≥a
        positive_count = sum(1 for keyword in positive_keywords if keyword in reasoning_lower)
        negative_count = sum(1 for keyword in negative_keywords if keyword in reasoning_lower)
        
        # Base score t·ª´ sentiment
        base_score = max(0, min(10, 5 + positive_count - negative_count))
        
        # Bonus t·ª´ specific criteria
        for criterion, weight in criteria.items():
            if any(term in reasoning_lower for term in criterion.split('_')):
                base_score += weight * 0.5
        
        return min(10.0, base_score)
    
    def calculate_fundamental_score(self, reasoning: str) -> float:
        """T√≠nh ƒëi·ªÉm ph√¢n t√≠ch c∆° b·∫£n"""
        return self.extract_score_from_reasoning(reasoning, self.fundamental_criteria)
    
    def calculate_technical_score(self, reasoning: str) -> float:
        """T√≠nh ƒëi·ªÉm ph√¢n t√≠ch k·ªπ thu·∫≠t"""
        return self.extract_score_from_reasoning(reasoning, self.technical_criteria)
    
    def calculate_macro_score(self, reasoning: str) -> float:
        """T√≠nh ƒëi·ªÉm ph√¢n t√≠ch vƒ© m√¥"""
        if not reasoning or 'kh√¥ng c√≥ th√¥ng tin' in reasoning.lower():
            return 5.0  # Neutral score
        
        # Simple sentiment analysis for macro
        positive_terms = ['t√≠ch c·ª±c', 'thu·∫≠n l·ª£i', 'h·ªó tr·ª£', 'tƒÉng tr∆∞·ªüng']
        negative_terms = ['ti√™u c·ª±c', 'b·∫•t l·ª£i', 'r·ªßi ro', 'suy tho√°i']
        
        reasoning_lower = reasoning.lower()
        positive_count = sum(1 for term in positive_terms if term in reasoning_lower)
        negative_count = sum(1 for term in negative_terms if term in reasoning_lower)
        
        return max(0, min(10, 5 + positive_count * 1.5 - negative_count * 1.5))
    
    def calculate_total_score(self, decision_data: Dict) -> float:
        """
        T√≠nh t·ªïng ƒëi·ªÉm t·ª´ d·ªØ li·ªáu ph√¢n t√≠ch
        
        Args:
            decision_data: Dict ch·ª©a k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ CrewAI
            
        Returns:
            T·ªïng ƒëi·ªÉm t·ª´ 0-10
        """
        # Extract scores from reasoning
        fund_score = self.calculate_fundamental_score(
            decision_data.get('fund_reasoning', '')
        )
        
        tech_score = self.calculate_technical_score(
            decision_data.get('tech_reasoning', '')
        )
        
        macro_score = self.calculate_macro_score(
            decision_data.get('macro_reasoning', '')
        )
        
        # Sentiment score (placeholder - c√≥ th·ªÉ c·∫£i thi·ªán)
        sentiment_score = 5.0  # Neutral default
        
        # Calculate weighted total
        total_score = (
            fund_score * self.weights['fundamental'] +
            tech_score * self.weights['technical'] +
            macro_score * self.weights['macro'] +
            sentiment_score * self.weights['sentiment']
        )
        
        # Apply decision bonus/penalty
        decision = decision_data.get('decision', '').upper()
        if decision == 'MUA':
            total_score += 1.0  # Bonus for BUY
        elif decision == 'B√ÅN':
            total_score -= 1.0  # Penalty for SELL
        
        return max(0, min(10, total_score))
    
    def rank_stocks(self, analysis_results: List[Dict]) -> List[Dict]:
        """
        X·∫øp h·∫°ng danh s√°ch c·ªï phi·∫øu
        
        Args:
            analysis_results: List k·∫øt qu·∫£ ph√¢n t√≠ch
            
        Returns:
            List ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo ƒëi·ªÉm s·ªë gi·∫£m d·∫ßn
        """
        # Calculate scores for all stocks
        for result in analysis_results:
            if 'total_score' not in result:
                result['total_score'] = self.calculate_total_score(
                    result.get('raw_data', {})
                )
        
        # Sort by score descending
        ranked_results = sorted(
            analysis_results, 
            key=lambda x: x.get('total_score', 0), 
            reverse=True
        )
        
        # Add ranking position
        for i, result in enumerate(ranked_results, 1):
            result['rank'] = i
        
        return ranked_results
    
    def filter_buy_recommendations(self, 
                                 ranked_results: List[Dict], 
                                 min_score: float = 7.5) -> List[Dict]:
        """
        L·ªçc ch·ªâ c√°c khuy·∫øn ngh·ªã MUA v·ªõi ƒëi·ªÉm s·ªë cao
        
        Args:
            ranked_results: List k·∫øt qu·∫£ ƒë√£ x·∫øp h·∫°ng
            min_score: ƒêi·ªÉm t·ªëi thi·ªÉu
            
        Returns:
            List c√°c khuy·∫øn ngh·ªã MUA ƒë∆∞·ª£c l·ªçc
        """
        buy_recommendations = []
        
        for result in ranked_results:
            # Check decision
            decision = result.get('decision', '').upper()
            if decision != 'MUA':
                continue
            
            # Check minimum score
            total_score = result.get('total_score', 0)
            if total_score < min_score:
                continue
            
            buy_recommendations.append(result)
        
        return buy_recommendations
    
    def generate_ranking_summary(self, ranked_results: List[Dict]) -> str:
        """
        T·∫°o b√°o c√°o t√≥m t·∫Øt x·∫øp h·∫°ng
        
        Args:
            ranked_results: List k·∫øt qu·∫£ ƒë√£ x·∫øp h·∫°ng
            
        Returns:
            B√°o c√°o d·∫°ng text
        """
        if not ranked_results:
            return "No stocks to rank"
        
        summary = []
        summary.append("üìä STOCK RANKING SUMMARY")
        summary.append("=" * 40)
        
        # Statistics
        total_stocks = len(ranked_results)
        buy_stocks = len([r for r in ranked_results if r.get('decision', '').upper() == 'MUA'])
        avg_score = sum(r.get('total_score', 0) for r in ranked_results) / total_stocks
        
        summary.append(f"Total Stocks Analyzed: {total_stocks}")
        summary.append(f"Buy Recommendations: {buy_stocks}")
        summary.append(f"Average Score: {avg_score:.2f}")
        summary.append("")
        
        # Top performers
        summary.append("üèÜ TOP 10 PERFORMERS:")
        summary.append("-" * 30)
        
        for result in ranked_results[:10]:
            rank = result.get('rank', 0)
            symbol = result.get('symbol', 'N/A')
            score = result.get('total_score', 0)
            decision = result.get('decision', 'N/A')
            
            summary.append(f"{rank:2d}. {symbol:>4} | Score: {score:5.2f} | {decision}")
        
        return "\n".join(summary)
