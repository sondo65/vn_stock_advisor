"""
Optimized Scanner UI Components for Streamlit

UI components for the optimized stock scanner system.
"""

import streamlit as st
import pandas as pd
import time
from datetime import datetime
from typing import List, Dict, Any

def render_optimized_stock_scanner():
    """Render optimized stock scanner interface."""
    st.markdown("### ‚ö° Qu√©t C·ªï Phi·∫øu T·ªëi ∆Øu")
    st.markdown("üéØ **H·ªá th·ªëng qu√©t th√¥ng minh** - Ti·∫øt ki·ªám 60-80% token, t·∫≠p trung v√†o c·ªï phi·∫øu ti·ªÅm nƒÉng cao")
    
    # Import scanner components
    try:
        from src.vn_stock_advisor.scanner import (
            LightweightStockScanner,
            find_opportunities,
            get_analysis_priorities
        )
        from src.vn_stock_advisor.scanner.priority_ranking import PriorityLevel
        SCANNER_AVAILABLE = True
    except ImportError as e:
        st.error(f"‚ùå Scanner modules not available: {e}")
        SCANNER_AVAILABLE = False
        return
    
    # Create tabs for different scanner modes
    scanner_tab1, scanner_tab2, scanner_tab3 = st.tabs([
        "üîç Qu√©t Nhanh", 
        "üéØ L·ªçc C∆° H·ªôi", 
        "üìä X·∫øp H·∫°ng ∆Øu Ti√™n"
    ])
    
    with scanner_tab1:
        render_lightweight_scanner()
    
    with scanner_tab2:
        render_screening_engine()
    
    with scanner_tab3:
        render_priority_ranking()

def render_lightweight_scanner():
    """Render lightweight scanner interface."""
    st.markdown("#### ‚ö° Qu√©t Nhanh C·ªï Phi·∫øu")
    st.info("üöÄ **T√≠nh nƒÉng m·ªõi**: Qu√©t nhanh ch·ªâ v·ªõi ph√¢n t√≠ch k·ªπ thu·∫≠t c∆° b·∫£n v√† ƒë·ªãnh gi√°, ti·∫øt ki·ªám ƒë·∫øn 80% token!")
    
    # Configuration
    col1, col2, col3 = st.columns(3)
    
    with col1:
        scan_mode = st.selectbox(
            "üéØ Ch·∫ø ƒë·ªô qu√©t",
            ["Th·ªã tr∆∞·ªùng ph·ªï bi·∫øn", "VN30", "HNX30", "Danh s√°ch t√πy ch·ªânh"],
            key="lightweight_scan_mode"
        )
    
    with col2:
        min_score = st.slider(
            "‚≠ê ƒêi·ªÉm t·ªëi thi·ªÉu",
            0.0, 10.0, 6.0, 0.5,
            help="ƒêi·ªÉm c√†ng cao = ti·ªÅm nƒÉng c√†ng l·ªõn",
            key="lightweight_min_score"
        )
    
    with col3:
        max_results = st.selectbox(
            "üìä S·ªë k·∫øt qu·∫£ t·ªëi ƒëa",
            [10, 15, 20, 30],
            index=1,
            key="lightweight_max_results"
        )
    
    # Custom list input
    if scan_mode == "Danh s√°ch t√πy ch·ªânh":
        custom_stocks = st.text_area(
            "üìù Nh·∫≠p m√£ c·ªï phi·∫øu",
            placeholder="VIC, VCB, FPT, HPG, VNM",
            help="C√°ch nhau b·∫±ng d·∫•u ph·∫©y",
            key="lightweight_custom_stocks"
        )
    
    # Advanced options
    with st.expander("‚öôÔ∏è T√πy ch·ªçn n√¢ng cao"):
        col1, col2 = st.columns(2)
        with col1:
            only_buy_watch = st.checkbox(
                "Ch·ªâ hi·ªÉn th·ªã BUY v√† WATCH",
                value=True,
                key="lightweight_only_buy_watch"
            )
        with col2:
            use_cache = st.checkbox(
                "S·ª≠ d·ª•ng cache (ti·∫øt ki·ªám token)",
                value=True,
                key="lightweight_use_cache"
            )
    
    # Scan button
    if st.button("‚ö° Qu√©t Nhanh", type="primary", use_container_width=True, key="lightweight_scan"):
        try:
            from src.vn_stock_advisor.scanner.lightweight_scanner import LightweightStockScanner
            
            # Prepare stock list
            if scan_mode == "Th·ªã tr∆∞·ªùng ph·ªï bi·∫øn":
                scanner = LightweightStockScanner(max_workers=3, use_cache=use_cache)
                stock_list = scanner.get_popular_stocks()[:25]
            elif scan_mode == "VN30":
                stock_list = [
                    'VIC', 'VHM', 'VRE', 'VCB', 'BID', 'CTG', 'TCB', 'MBB', 'ACB', 'TPB',
                    'HPG', 'HSG', 'NKG', 'GVR', 'PLX', 'POW', 'GAS', 'VNM', 'MSN', 'MWG',
                    'FPT', 'VJC', 'HVN', 'SAB', 'BVH', 'CTD', 'PDR', 'KDH', 'DXG', 'STB'
                ]
            elif scan_mode == "HNX30":
                stock_list = [
                    'SHB', 'PVS', 'CEO', 'TNG', 'VCS', 'IDC', 'NVB', 'PVB', 'THD', 'DTD',
                    'MBS', 'BVS', 'PVC', 'VIG', 'NDN', 'VC3', 'PVI', 'TIG', 'VND', 'HUT'
                ]
            else:  # Custom
                if not custom_stocks:
                    st.error("‚ùå Vui l√≤ng nh·∫≠p danh s√°ch m√£ c·ªï phi·∫øu")
                    return
                stock_list = [s.strip().upper() for s in custom_stocks.split(',') if s.strip()]
            
            # Initialize scanner
            scanner = LightweightStockScanner(max_workers=3, use_cache=use_cache)
            
            # Show progress
            progress_container = st.container()
            with progress_container:
                st.info(f"üîç ƒêang qu√©t {len(stock_list)} c·ªï phi·∫øu...")
                progress_bar = st.progress(0)
                status_text = st.empty()
            
            # Run scan
            start_time = time.time()
            
            with st.spinner("‚ö° ƒêang ph√¢n t√≠ch nhanh..."):
                status_text.text("üîç Thu th·∫≠p d·ªØ li·ªáu c∆° b·∫£n...")
                progress_bar.progress(30)
                
                results = scanner.scan_stocks_lightweight(
                    stock_list=stock_list,
                    min_score=min_score,
                    only_buy_watch=only_buy_watch,
                    max_results=max_results
                )
                
                progress_bar.progress(100)
            
            scan_time = time.time() - start_time
            
            # Clear progress
            progress_container.empty()
            
            # Display results
            if results:
                st.success(f"‚úÖ Ho√†n th√†nh trong {scan_time:.1f}s! T√¨m th·∫•y {len(results)} c∆° h·ªôi")
                display_lightweight_results(results)
                
                # Store results for other tabs
                st.session_state.lightweight_scan_results = results
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªï phi·∫øu n√†o ƒë√°p ·ª©ng ti√™u ch√≠")
                st.info("üí° Th·ª≠ gi·∫£m ƒëi·ªÉm t·ªëi thi·ªÉu ho·∫∑c b·ªè ch·ªçn 'Ch·ªâ BUY v√† WATCH'")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói: {str(e)}")
            if "rate limit" in str(e).lower():
                st.info("‚è±Ô∏è ƒê√£ g·∫∑p gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau 1-2 ph√∫t.")
            else:
                st.info("üí° C√≥ th·ªÉ do l·ªói k·∫øt n·ªëi ho·∫∑c d·ªØ li·ªáu kh√¥ng kh·∫£ d·ª•ng.")

def render_screening_engine():
    """Render screening engine interface."""
    st.markdown("#### üéØ L·ªçc C∆° H·ªôi ƒê·∫ßu T∆∞")
    st.markdown("√Åp d·ª•ng c√°c b·ªô l·ªçc th√¥ng minh ƒë·ªÉ t√¨m c∆° h·ªôi ƒë·∫ßu t∆∞ c·ª• th·ªÉ")
    
    # Check if we have scan results
    if 'lightweight_scan_results' not in st.session_state:
        st.info("üí° Vui l√≤ng ch·∫°y 'Qu√©t Nhanh' tr∆∞·ªõc ƒë·ªÉ c√≥ d·ªØ li·ªáu l·ªçc")
        
        # Quick scan button
        if st.button("üîç Qu√©t d·ªØ li·ªáu nhanh", key="quick_scan_for_screening"):
            with st.spinner("ƒêang qu√©t d·ªØ li·ªáu..."):
                try:
                    from src.vn_stock_advisor.scanner.lightweight_scanner import LightweightStockScanner
                    scanner = LightweightStockScanner(max_workers=3)
                    stock_list = scanner.get_popular_stocks()[:20]
                    results = scanner.scan_stocks_lightweight(stock_list, min_score=4.0, only_buy_watch=False)
                    st.session_state.lightweight_scan_results = results
                    st.success(f"‚úÖ ƒê√£ qu√©t {len(results)} c·ªï phi·∫øu")
                    st.experimental_rerun()
                except Exception as e:
                    st.error(f"‚ùå L·ªói qu√©t d·ªØ li·ªáu: {e}")
        return
    
    results = st.session_state.lightweight_scan_results
    
    if not results:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l·ªçc")
        return
    
    # Filter selection
    col1, col2 = st.columns(2)
    
    with col1:
        filter_descriptions = {
            "value_opportunities": "üíé C·ªï phi·∫øu gi√° tr·ªã (P/B th·∫•p, ROE cao)",
            "momentum_plays": "üöÄ Xu h∆∞·ªõng m·∫°nh (MACD+, MA tƒÉng)",
            "oversold_bounce": "üìà C∆° h·ªôi ph·ª•c h·ªìi (RSI qu√° b√°n)",
            "quality_growth": "‚≠ê TƒÉng tr∆∞·ªüng ch·∫•t l∆∞·ª£ng (ROE cao, ·ªïn ƒë·ªãnh)",
            "breakout_candidates": "üí• ·ª®ng vi√™n breakout (Volume tƒÉng, momentum)"
        }
        
        selected_filters = st.multiselect(
            "üéØ Ch·ªçn b·ªô l·ªçc",
            list(filter_descriptions.keys()),
            default=["value_opportunities", "momentum_plays"],
            format_func=lambda x: filter_descriptions[x],
            key="screening_filters"
        )
    
    with col2:
        top_n = st.selectbox(
            "üìä Top picks m·ªói lo·∫°i",
            [3, 5, 8, 10],
            index=1,
            key="screening_top_n"
        )
    
    if st.button("üéØ √Åp d·ª•ng b·ªô l·ªçc", key="apply_screening"):
        with st.spinner("ƒêang l·ªçc c∆° h·ªôi..."):
            try:
                from src.vn_stock_advisor.scanner import find_opportunities
                opportunities = find_opportunities(results)
                
                # Display opportunities by category
                for filter_name in selected_filters:
                    if filter_name in opportunities and opportunities[filter_name]:
                        stocks = opportunities[filter_name]
                        
                        st.markdown(f"##### {filter_descriptions[filter_name]}")
                        
                        # Create mini table for each category
                        category_data = []
                        for stock in stocks[:top_n]:
                            category_data.append({
                                'Symbol': stock['symbol'],
                                'Score': f"{stock.get('filter_score', 0):.1f}",
                                'P/B': f"{stock.get('pb_ratio', 0):.2f}",
                                'RSI': f"{stock.get('rsi', 0):.1f}",
                                'Trend': stock.get('ma_trend', 'N/A'),
                                'MACD': stock.get('macd_signal', 'N/A')
                            })
                        
                        if category_data:
                            df = pd.DataFrame(category_data)
                            st.dataframe(df, use_container_width=True, hide_index=True)
                
                # Overall top picks
                if "overall_top" in opportunities and opportunities["overall_top"]:
                    st.markdown("##### üèÜ Top Picks T·ªïng Th·ªÉ")
                    display_opportunity_summary(opportunities["overall_top"][:top_n])
                    
            except Exception as e:
                st.error(f"‚ùå L·ªói l·ªçc c∆° h·ªôi: {e}")

def render_priority_ranking():
    """Render priority ranking interface."""
    st.markdown("#### üìä X·∫øp H·∫°ng ∆Øu Ti√™n Ph√¢n T√≠ch")
    st.markdown("X·∫øp h·∫°ng c·ªï phi·∫øu theo ƒë·ªô ∆∞u ti√™n ƒë·ªÉ t·ªëi ∆∞u h√≥a th·ªùi gian ph√¢n t√≠ch chuy√™n s√¢u")
    
    # Check if we have scan results
    if 'lightweight_scan_results' not in st.session_state:
        st.info("üí° Vui l√≤ng ch·∫°y 'Qu√©t Nhanh' tr∆∞·ªõc ƒë·ªÉ c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng")
        return
    
    results = st.session_state.lightweight_scan_results
    
    if not results:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x·∫øp h·∫°ng")
        return
    
    # Configuration
    col1, col2 = st.columns(2)
    
    with col1:
        show_all_priorities = st.checkbox(
            "Hi·ªÉn th·ªã t·∫•t c·∫£ m·ª©c ∆∞u ti√™n",
            value=False,
            key="show_all_priorities"
        )
    
    with col2:
        max_per_priority = st.selectbox(
            "S·ªë l∆∞·ª£ng t·ªëi ƒëa m·ªói m·ª©c",
            [3, 5, 8, 10],
            index=1,
            key="max_per_priority"
        )
    
    if st.button("üìä X·∫øp h·∫°ng ∆∞u ti√™n", key="create_rankings"):
        with st.spinner("ƒêang x·∫øp h·∫°ng..."):
            try:
                from src.vn_stock_advisor.scanner import get_analysis_priorities
                from src.vn_stock_advisor.scanner.priority_ranking import PriorityLevel
                
                # Get priority rankings
                priority_queue = get_analysis_priorities(results)
                
                # Display by priority level
                priority_colors = {
                    PriorityLevel.CRITICAL: "üî¥",
                    PriorityLevel.HIGH: "üü†", 
                    PriorityLevel.MEDIUM: "üü°",
                    PriorityLevel.LOW: "üü¢",
                    PriorityLevel.SKIP: "‚ö™"
                }
                
                priority_descriptions = {
                    PriorityLevel.CRITICAL: "Ph√¢n t√≠ch ngay l·∫≠p t·ª©c",
                    PriorityLevel.HIGH: "Ph√¢n t√≠ch trong 1 gi·ªù",
                    PriorityLevel.MEDIUM: "Ph√¢n t√≠ch trong ng√†y",
                    PriorityLevel.LOW: "Ph√¢n t√≠ch khi r·∫£nh",
                    PriorityLevel.SKIP: "B·ªè qua"
                }
                
                total_high_priority = 0
                
                for priority_level in [PriorityLevel.CRITICAL, PriorityLevel.HIGH, PriorityLevel.MEDIUM, PriorityLevel.LOW]:
                    stocks = priority_queue.get(priority_level, [])
                    
                    if stocks and (show_all_priorities or priority_level.value <= 3):
                        emoji = priority_colors[priority_level]
                        desc = priority_descriptions[priority_level]
                        
                        st.markdown(f"##### {emoji} {priority_level.name} - {desc}")
                        
                        if priority_level.value <= 2:  # CRITICAL or HIGH
                            total_high_priority += len(stocks)
                        
                        # Display stocks in this priority
                        priority_data = []
                        for stock in stocks[:max_per_priority]:
                            priority_data.append({
                                'Symbol': stock.symbol,
                                'Score': f"{stock.overall_score:.1f}",
                                'Analysis': stock.recommended_analysis_type,
                                'Time': f"{stock.estimated_analysis_time}min",
                                'Confidence': f"{stock.confidence_level:.0%}",
                                'Notes': stock.notes[0] if stock.notes else ""
                            })
                        
                        if priority_data:
                            df = pd.DataFrame(priority_data)
                            st.dataframe(df, use_container_width=True, hide_index=True)
                        
                        # Quick action buttons for high priority
                        if priority_level.value <= 2 and priority_data:
                            st.markdown("**üöÄ H√†nh ƒë·ªông nhanh:**")
                            cols = st.columns(min(len(priority_data), 4))
                            for i, (col, stock_data) in enumerate(zip(cols, priority_data)):
                                with col:
                                    if st.button(
                                        f"Ph√¢n t√≠ch {stock_data['Symbol']}", 
                                        key=f"quick_analyze_{stock_data['Symbol']}_{priority_level.name}"
                                    ):
                                        st.info(f"üîÑ Chuy·ªÉn ƒë·∫øn ph√¢n t√≠ch chuy√™n s√¢u cho {stock_data['Symbol']}")
                                        # Set session state to trigger analysis
                                        st.session_state.selected_stock = stock_data['Symbol']
                                        st.experimental_rerun()
                
                # Summary
                st.markdown("---")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("üî• ∆Øu ti√™n cao", total_high_priority)
                
                with col2:
                    total_analysis_time = sum(
                        stock.estimated_analysis_time 
                        for stocks in priority_queue.values() 
                        for stock in stocks
                        if stock.priority_level != PriorityLevel.SKIP
                    )
                    st.metric("‚è±Ô∏è T·ªïng th·ªùi gian", f"{total_analysis_time}min")
                
                with col3:
                    efficiency_score = (total_high_priority / len(results) * 100) if results else 0
                    st.metric("‚ö° Hi·ªáu qu·∫£", f"{efficiency_score:.0f}%")
            
            except Exception as e:
                st.error(f"‚ùå L·ªói x·∫øp h·∫°ng: {e}")

def display_lightweight_results(results):
    """Display lightweight scanner results."""
    if not results:
        return
    
    st.markdown("#### üìä K·∫øt Qu·∫£ Qu√©t Nhanh")
    
    # Quick stats
    col1, col2, col3, col4 = st.columns(4)
    
    buy_count = len([r for r in results if r.recommendation == "BUY"])
    watch_count = len([r for r in results if r.recommendation == "WATCH"])
    avg_score = sum(r.overall_score for r in results) / len(results)
    avg_pb = sum(r.pb_ratio for r in results if r.pb_ratio > 0) / len([r for r in results if r.pb_ratio > 0]) if any(r.pb_ratio > 0 for r in results) else 0
    
    with col1:
        st.metric("üü¢ BUY signals", buy_count)
    with col2:
        st.metric("üü° WATCH signals", watch_count)
    with col3:
        st.metric("‚≠ê ƒêi·ªÉm TB", f"{avg_score:.1f}")
    with col4:
        st.metric("üìä P/B TB", f"{avg_pb:.2f}")
    
    # Results table
    df_data = []
    for i, result in enumerate(results, 1):
        df_data.append({
            'Rank': i,
            'Symbol': result.symbol,
            'Rec': result.recommendation,
            'Score': f"{result.overall_score:.1f}",
            'Value': f"{result.value_score:.1f}",
            'Momentum': f"{result.momentum_score:.1f}",
            'P/B': f"{result.pb_ratio:.2f}",
            'RSI': f"{result.rsi:.1f}",
            'MACD': result.macd_signal,
            'Trend': result.ma_trend,
            'Conf': f"{result.confidence:.0%}"
        })
    
    df = pd.DataFrame(df_data)
    
    st.dataframe(
        df,
        use_container_width=True,
        hide_index=True,
        column_config={
            "Rank": st.column_config.NumberColumn("üèÜ", width="tiny"),
            "Symbol": st.column_config.TextColumn("üìä", width="small"),
            "Rec": st.column_config.TextColumn("üí°", width="tiny"),
            "Score": st.column_config.TextColumn("‚≠ê", width="tiny"),
            "Value": st.column_config.TextColumn("üíé", width="tiny"),
            "Momentum": st.column_config.TextColumn("üöÄ", width="tiny"),
            "P/B": st.column_config.TextColumn("üìà", width="tiny"),
            "RSI": st.column_config.TextColumn("üìä", width="tiny"),
            "MACD": st.column_config.TextColumn("üìà", width="tiny"),
            "Trend": st.column_config.TextColumn("‚ÜóÔ∏è", width="tiny"),
            "Conf": st.column_config.TextColumn("üéØ", width="tiny")
        }
    )
    
    # Action buttons for top picks
    if buy_count > 0:
        st.markdown("#### üöÄ H√†nh ƒê·ªông Nhanh")
        buy_stocks = [r for r in results if r.recommendation == "BUY"]
        
        cols = st.columns(min(len(buy_stocks), 5))
        for i, (col, stock) in enumerate(zip(cols, buy_stocks[:5])):
            with col:
                if st.button(
                    f"üìà Ph√¢n t√≠ch {stock.symbol}", 
                    key=f"analyze_from_scanner_{stock.symbol}"
                ):
                    # Set for analysis in main tab
                    st.session_state.selected_stock = stock.symbol
                    st.info(f"üîÑ ƒê√£ ch·ªçn {stock.symbol} ƒë·ªÉ ph√¢n t√≠ch chuy√™n s√¢u")

def display_opportunity_summary(opportunities):
    """Display opportunity summary."""
    if not opportunities:
        return
    
    summary_data = []
    for i, stock in enumerate(opportunities, 1):
        summary_data.append({
            'Rank': i,
            'Symbol': stock['symbol'],
            'Score': f"{stock.get('filter_score', 0):.1f}",
            'P/B': f"{stock.get('pb_ratio', 0):.2f}",
            'P/E': f"{stock.get('pe_ratio', 0):.1f}",
            'RSI': f"{stock.get('rsi', 0):.1f}",
            'MACD': stock.get('macd_signal', 'N/A'),
            'Industry': stock.get('industry', 'N/A')
        })
    
    df = pd.DataFrame(summary_data)
    st.dataframe(df, use_container_width=True, hide_index=True)

def render_scanner_info_panel():
    """Render info panel about scanner benefits."""
    st.markdown("#### üí° V·ªÅ H·ªá Th·ªëng Scanner T·ªëi ∆Øu")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **‚ö° T√≠nh nƒÉng ch√≠nh:**
        - üîç Qu√©t nhanh v·ªõi token usage t·ªëi thi·ªÉu
        - üéØ L·ªçc theo nhi·ªÅu ti√™u ch√≠ th√¥ng minh
        - üìä X·∫øp h·∫°ng ∆∞u ti√™n ph√¢n t√≠ch
        - üí∞ Ti·∫øt ki·ªám 60-80% token v·ªõi cache
        - üöÄ Workflow t·ª± ƒë·ªông h√≥a
        """)
    
    with col2:
        st.markdown("""
        **üìà L·ª£i √≠ch:**
        - ‚è±Ô∏è Nhanh h∆°n 5-10x so v·ªõi ph√¢n t√≠ch ƒë·∫ßy ƒë·ªß
        - üéØ T·∫≠p trung v√†o c·ªï phi·∫øu ti·ªÅm nƒÉng cao
        - üí∏ Gi·∫£m chi ph√≠ API ƒë√°ng k·ªÉ
        - üîÑ K·∫øt qu·∫£ nh·∫•t qu√°n v√† tin c·∫≠y
        - üìä B√°o c√°o chi ti·∫øt v√† tr·ª±c quan
        """)
    
    # Performance metrics (if available)
    if hasattr(st.session_state, 'scanner_stats'):
        stats = st.session_state.scanner_stats
        
        st.markdown("#### üìä Th·ªëng K√™ Hi·ªáu Su·∫•t")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üîç ƒê√£ qu√©t", f"{stats.get('total_scanned', 0)} c·ªï phi·∫øu")
        with col2:
            st.metric("üí∞ Token ti·∫øt ki·ªám", f"{stats.get('tokens_saved', 0):,}")
        with col3:
            st.metric("‚ö° Cache hit rate", f"{stats.get('cache_hit_rate', 0):.1f}%")
        with col4:
            st.metric("‚è±Ô∏è Th·ªùi gian TB", f"{stats.get('avg_time', 0):.1f}s")
